/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.SmdpDslGrammarAccess;

public class SmdpDslParser extends AbstractContentAssistParser {
	
	@Inject
	private SmdpDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalSmdpDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalSmdpDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalSmdpDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMyExpressionAccess().getAlternatives(), "rule__MyExpression__Alternatives");
					put(grammarAccess.getMyValueAccess().getAlternatives(), "rule__MyValue__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMyBinaryOparatorsAccess().getAlternatives(), "rule__MyBinaryOparators__Alternatives");
					put(grammarAccess.getMyModelAccess().getGroup(), "rule__MyModel__Group__0");
					put(grammarAccess.getMyModelAccess().getGroup_4(), "rule__MyModel__Group_4__0");
					put(grammarAccess.getMyModelAccess().getGroup_4_3(), "rule__MyModel__Group_4_3__0");
					put(grammarAccess.getMyObjectAccess().getGroup(), "rule__MyObject__Group__0");
					put(grammarAccess.getMyObjectAccess().getGroup_4(), "rule__MyObject__Group_4__0");
					put(grammarAccess.getMyObjectAccess().getGroup_4_3(), "rule__MyObject__Group_4_3__0");
					put(grammarAccess.getMyObjectAccess().getGroup_5(), "rule__MyObject__Group_5__0");
					put(grammarAccess.getMyObjectAccess().getGroup_5_3(), "rule__MyObject__Group_5_3__0");
					put(grammarAccess.getMyConstraintAccess().getGroup(), "rule__MyConstraint__Group__0");
					put(grammarAccess.getMyAttributeAccess().getGroup(), "rule__MyAttribute__Group__0");
					put(grammarAccess.getMyBinaryAccess().getGroup(), "rule__MyBinary__Group__0");
					put(grammarAccess.getMyBinaryAccess().getGroup_2(), "rule__MyBinary__Group_2__0");
					put(grammarAccess.getMyUnaryAccess().getGroup(), "rule__MyUnary__Group__0");
					put(grammarAccess.getMyUnaryAccess().getGroup_2(), "rule__MyUnary__Group_2__0");
					put(grammarAccess.getMyStringAccess().getGroup(), "rule__MyString__Group__0");
					put(grammarAccess.getMyIntAccess().getGroup(), "rule__MyInt__Group__0");
					put(grammarAccess.getBoolLiteralAccess().getGroup(), "rule__BoolLiteral__Group__0");
					put(grammarAccess.getMyIdentifierAccess().getGroup(), "rule__MyIdentifier__Group__0");
					put(grammarAccess.getMyEnumAccess().getGroup(), "rule__MyEnum__Group__0");
					put(grammarAccess.getMyEnumAccess().getGroup_5(), "rule__MyEnum__Group_5__0");
					put(grammarAccess.getBooleanValueAccess().getGroup(), "rule__BooleanValue__Group__0");
					put(grammarAccess.getMyRangeAccess().getGroup(), "rule__MyRange__Group__0");
					put(grammarAccess.getMyModelAccess().getNameAssignment_2(), "rule__MyModel__NameAssignment_2");
					put(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_4_2(), "rule__MyModel__MyModelContainsAssignment_4_2");
					put(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_4_3_1(), "rule__MyModel__MyModelContainsAssignment_4_3_1");
					put(grammarAccess.getMyObjectAccess().getNameAssignment_2(), "rule__MyObject__NameAssignment_2");
					put(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_2(), "rule__MyObject__MyObjectHasAssignment_4_2");
					put(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_3_1(), "rule__MyObject__MyObjectHasAssignment_4_3_1");
					put(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_5_2(), "rule__MyObject__MyAttributeContainsAssignment_5_2");
					put(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_5_3_1(), "rule__MyObject__MyAttributeContainsAssignment_5_3_1");
					put(grammarAccess.getMyConstraintAccess().getMyConstraintContainsAssignment_3(), "rule__MyConstraint__MyConstraintContainsAssignment_3");
					put(grammarAccess.getMyAttributeAccess().getNameAssignment_1(), "rule__MyAttribute__NameAssignment_1");
					put(grammarAccess.getMyAttributeAccess().getMyAttributeContainsAssignment_4(), "rule__MyAttribute__MyAttributeContainsAssignment_4");
					put(grammarAccess.getMyBinaryAccess().getOparandAssignment_2_1(), "rule__MyBinary__OparandAssignment_2_1");
					put(grammarAccess.getMyBinaryAccess().getMyBinaryLeftAssignment_4(), "rule__MyBinary__MyBinaryLeftAssignment_4");
					put(grammarAccess.getMyBinaryAccess().getMyBinaryRightAssignment_6(), "rule__MyBinary__MyBinaryRightAssignment_6");
					put(grammarAccess.getMyUnaryAccess().getOparandAssignment_2_1(), "rule__MyUnary__OparandAssignment_2_1");
					put(grammarAccess.getMyUnaryAccess().getMyUnaryExpressionAssignment_4(), "rule__MyUnary__MyUnaryExpressionAssignment_4");
					put(grammarAccess.getMyStringAccess().getValueAssignment_3(), "rule__MyString__ValueAssignment_3");
					put(grammarAccess.getMyIntAccess().getValueAssignment_3(), "rule__MyInt__ValueAssignment_3");
					put(grammarAccess.getBoolLiteralAccess().getValueAssignment_3(), "rule__BoolLiteral__ValueAssignment_3");
					put(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsAssignment_3(), "rule__MyIdentifier__MyIntentifierIsAssignment_3");
					put(grammarAccess.getMyEnumAccess().getValuesAssignment_4(), "rule__MyEnum__ValuesAssignment_4");
					put(grammarAccess.getMyEnumAccess().getValuesAssignment_5_1(), "rule__MyEnum__ValuesAssignment_5_1");
					put(grammarAccess.getBooleanValueAccess().getTrueValueAssignment_3(), "rule__BooleanValue__TrueValueAssignment_3");
					put(grammarAccess.getBooleanValueAccess().getFalseValueAssignment_5(), "rule__BooleanValue__FalseValueAssignment_5");
					put(grammarAccess.getMyRangeAccess().getRangeAssignment_3(), "rule__MyRange__RangeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalSmdpDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalSmdpDslParser) parser;
			typedParser.entryRulemyModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SmdpDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SmdpDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
