/*
* generated by Xtext
*/
grammar InternalSmdpDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SmdpDslGrammarAccess;

}

@parser::members {
 
 	private SmdpDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SmdpDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulemyModel
entryRulemyModel 
:
{ before(grammarAccess.getMyModelRule()); }
	 rulemyModel
{ after(grammarAccess.getMyModelRule()); } 
	 EOF 
;

// Rule myModel
rulemyModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyModelAccess().getGroup()); }
(rule__MyModel__Group__0)
{ after(grammarAccess.getMyModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyValue
entryRulemyValue 
:
{ before(grammarAccess.getMyValueRule()); }
	 rulemyValue
{ after(grammarAccess.getMyValueRule()); } 
	 EOF 
;

// Rule myValue
rulemyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyValueAccess().getAlternatives()); }
(rule__MyValue__Alternatives)
{ after(grammarAccess.getMyValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyExpression
entryRulemyExpression 
:
{ before(grammarAccess.getMyExpressionRule()); }
	 rulemyExpression
{ after(grammarAccess.getMyExpressionRule()); } 
	 EOF 
;

// Rule myExpression
rulemyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyExpressionAccess().getAlternatives()); }
(rule__MyExpression__Alternatives)
{ after(grammarAccess.getMyExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyObject
entryRulemyObject 
:
{ before(grammarAccess.getMyObjectRule()); }
	 rulemyObject
{ after(grammarAccess.getMyObjectRule()); } 
	 EOF 
;

// Rule myObject
rulemyObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyObjectAccess().getGroup()); }
(rule__MyObject__Group__0)
{ after(grammarAccess.getMyObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyConstraint
entryRulemyConstraint 
:
{ before(grammarAccess.getMyConstraintRule()); }
	 rulemyConstraint
{ after(grammarAccess.getMyConstraintRule()); } 
	 EOF 
;

// Rule myConstraint
rulemyConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyConstraintAccess().getGroup()); }
(rule__MyConstraint__Group__0)
{ after(grammarAccess.getMyConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyAttribute
entryRulemyAttribute 
:
{ before(grammarAccess.getMyAttributeRule()); }
	 rulemyAttribute
{ after(grammarAccess.getMyAttributeRule()); } 
	 EOF 
;

// Rule myAttribute
rulemyAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyAttributeAccess().getGroup()); }
(rule__MyAttribute__Group__0)
{ after(grammarAccess.getMyAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyConcreteExpression
entryRulemyConcreteExpression 
:
{ before(grammarAccess.getMyConcreteExpressionRule()); }
	 rulemyConcreteExpression
{ after(grammarAccess.getMyConcreteExpressionRule()); } 
	 EOF 
;

// Rule myConcreteExpression
rulemyConcreteExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyConcreteExpressionAccess().getMyConcreteExAssignment()); }
(rule__MyConcreteExpression__MyConcreteExAssignment)
{ after(grammarAccess.getMyConcreteExpressionAccess().getMyConcreteExAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyBinary
entryRulemyBinary 
:
{ before(grammarAccess.getMyBinaryRule()); }
	 rulemyBinary
{ after(grammarAccess.getMyBinaryRule()); } 
	 EOF 
;

// Rule myBinary
rulemyBinary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyBinaryAccess().getGroup()); }
(rule__MyBinary__Group__0)
{ after(grammarAccess.getMyBinaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyUnary
entryRulemyUnary 
:
{ before(grammarAccess.getMyUnaryRule()); }
	 rulemyUnary
{ after(grammarAccess.getMyUnaryRule()); } 
	 EOF 
;

// Rule myUnary
rulemyUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyUnaryAccess().getGroup()); }
(rule__MyUnary__Group__0)
{ after(grammarAccess.getMyUnaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyBoolean
entryRulemyBoolean 
:
{ before(grammarAccess.getMyBooleanRule()); }
	 rulemyBoolean
{ after(grammarAccess.getMyBooleanRule()); } 
	 EOF 
;

// Rule myBoolean
rulemyBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyBooleanAccess().getGroup()); }
(rule__MyBoolean__Group__0)
{ after(grammarAccess.getMyBooleanAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyIdentifier
entryRulemyIdentifier 
:
{ before(grammarAccess.getMyIdentifierRule()); }
	 rulemyIdentifier
{ after(grammarAccess.getMyIdentifierRule()); } 
	 EOF 
;

// Rule myIdentifier
rulemyIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyIdentifierAccess().getGroup()); }
(rule__MyIdentifier__Group__0)
{ after(grammarAccess.getMyIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyRange
entryRulemyRange 
:
{ before(grammarAccess.getMyRangeRule()); }
	 rulemyRange
{ after(grammarAccess.getMyRangeRule()); } 
	 EOF 
;

// Rule myRange
rulemyRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyRangeAccess().getGroup()); }
(rule__MyRange__Group__0)
{ after(grammarAccess.getMyRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyStringEnum
entryRulemyStringEnum 
:
{ before(grammarAccess.getMyStringEnumRule()); }
	 rulemyStringEnum
{ after(grammarAccess.getMyStringEnumRule()); } 
	 EOF 
;

// Rule myStringEnum
rulemyStringEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyStringEnumAccess().getGroup()); }
(rule__MyStringEnum__Group__0)
{ after(grammarAccess.getMyStringEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemyNumberEnum
entryRulemyNumberEnum 
:
{ before(grammarAccess.getMyNumberEnumRule()); }
	 rulemyNumberEnum
{ after(grammarAccess.getMyNumberEnumRule()); } 
	 EOF 
;

// Rule myNumberEnum
rulemyNumberEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyNumberEnumAccess().getGroup()); }
(rule__MyNumberEnum__Group__0)
{ after(grammarAccess.getMyNumberEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEDouble
entryRuleEDouble 
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEDoubleAccess().getAlternatives()); }
(rule__EDouble__Alternatives)
{ after(grammarAccess.getEDoubleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule myBinaryOparators
rulemyBinaryOparators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getAlternatives()); }
(rule__MyBinaryOparators__Alternatives)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule myUnaryOparators
rulemyUnaryOparators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyUnaryOparatorsAccess().getNotEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getMyUnaryOparatorsAccess().getNotEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MyValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyValueAccess().getMyBooleanParserRuleCall_0()); }
	rulemyBoolean
{ after(grammarAccess.getMyValueAccess().getMyBooleanParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyValueAccess().getMyRangeParserRuleCall_1()); }
	rulemyRange
{ after(grammarAccess.getMyValueAccess().getMyRangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMyValueAccess().getMyStringEnumParserRuleCall_2()); }
	rulemyStringEnum
{ after(grammarAccess.getMyValueAccess().getMyStringEnumParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMyValueAccess().getMyNumberEnumParserRuleCall_3()); }
	rulemyNumberEnum
{ after(grammarAccess.getMyValueAccess().getMyNumberEnumParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyExpressionAccess().getMyBinaryParserRuleCall_0()); }
	rulemyBinary
{ after(grammarAccess.getMyExpressionAccess().getMyBinaryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyUnaryParserRuleCall_1()); }
	rulemyUnary
{ after(grammarAccess.getMyExpressionAccess().getMyUnaryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyBooleanParserRuleCall_2()); }
	rulemyBoolean
{ after(grammarAccess.getMyExpressionAccess().getMyBooleanParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyRangeParserRuleCall_3()); }
	rulemyRange
{ after(grammarAccess.getMyExpressionAccess().getMyRangeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyStringEnumParserRuleCall_4()); }
	rulemyStringEnum
{ after(grammarAccess.getMyExpressionAccess().getMyStringEnumParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyNumberEnumParserRuleCall_5()); }
	rulemyNumberEnum
{ after(grammarAccess.getMyExpressionAccess().getMyNumberEnumParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getMyExpressionAccess().getMyIdentifierParserRuleCall_6()); }
	rulemyIdentifier
{ after(grammarAccess.getMyExpressionAccess().getMyIdentifierParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getGroup_0()); }
(rule__EDouble__Group_0__0)
{ after(grammarAccess.getEDoubleAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
	ruleEInt
{ after(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives_0_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getEKeyword_0_4_0_0()); }

	'E' 

{ after(grammarAccess.getEDoubleAccess().getEKeyword_0_4_0_0()); }
)

    |(
{ before(grammarAccess.getEDoubleAccess().getEKeyword_0_4_0_1()); }

	'e' 

{ after(grammarAccess.getEDoubleAccess().getEKeyword_0_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinaryOparators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getAndEnumLiteralDeclaration_0()); }
(	'&&' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getAndEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getOrEnumLiteralDeclaration_1()); }
(	'|' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getOrEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getGtEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getGtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getLtEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getLtEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getEqEnumLiteralDeclaration_4()); }
(	'=' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getEqEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getIsEnumLiteralDeclaration_5()); }
(	'can' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getIsEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getIfEnumLiteralDeclaration_6()); }
(	'if' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getIfEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getMyBinaryOparatorsAccess().getThenEnumLiteralDeclaration_7()); }
(	'then' 
)
{ after(grammarAccess.getMyBinaryOparatorsAccess().getThenEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MyModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group__0__Impl
	rule__MyModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getMyModelAction_0()); }
(

)
{ after(grammarAccess.getMyModelAccess().getMyModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group__1__Impl
	rule__MyModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getNameAssignment_1()); }
(rule__MyModel__NameAssignment_1)
{ after(grammarAccess.getMyModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getGroup_2()); }
(rule__MyModel__Group_2__0)?
{ after(grammarAccess.getMyModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyModel__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2__0__Impl
	rule__MyModel__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getMyModelAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2__1__Impl
	rule__MyModel__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_2_1()); }
(rule__MyModel__MyModelContainsAssignment_2_1)
{ after(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2__2__Impl
	rule__MyModel__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getGroup_2_2()); }
(rule__MyModel__Group_2_2__0)*
{ after(grammarAccess.getMyModelAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getRightCurlyBracketKeyword_2_3()); }

	'}' 

{ after(grammarAccess.getMyModelAccess().getRightCurlyBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MyModel__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2_2__0__Impl
	rule__MyModel__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getMyModelAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyModel__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyModel__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_2_2_1()); }
(rule__MyModel__MyModelContainsAssignment_2_2_1)
{ after(grammarAccess.getMyModelAccess().getMyModelContainsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__0__Impl
	rule__MyObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyObjectAction_0()); }
(

)
{ after(grammarAccess.getMyObjectAccess().getMyObjectAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__1__Impl
	rule__MyObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getNameAssignment_1()); }
(rule__MyObject__NameAssignment_1)
{ after(grammarAccess.getMyObjectAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__2__Impl
	rule__MyObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMyObjectAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__3__Impl
	rule__MyObject__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getGroup_3()); }
(rule__MyObject__Group_3__0)?
{ after(grammarAccess.getMyObjectAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__4__Impl
	rule__MyObject__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getGroup_4()); }
(rule__MyObject__Group_4__0)?
{ after(grammarAccess.getMyObjectAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMyObjectAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__MyObject__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_3__0__Impl
	rule__MyObject__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getHasKeyword_3_0()); }

	'has' 

{ after(grammarAccess.getMyObjectAccess().getHasKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_3__1__Impl
	rule__MyObject__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_3_1()); }
(rule__MyObject__MyAttributeContainsAssignment_3_1)
{ after(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getGroup_3_2()); }
(rule__MyObject__Group_3_2__0)*
{ after(grammarAccess.getMyObjectAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyObject__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_3_2__0__Impl
	rule__MyObject__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getMyObjectAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_3_2_1()); }
(rule__MyObject__MyAttributeContainsAssignment_3_2_1)
{ after(grammarAccess.getMyObjectAccess().getMyAttributeContainsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyObject__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_4__0__Impl
	rule__MyObject__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getConstrainedByKeyword_4_0()); }

	'Constrained by' 

{ after(grammarAccess.getMyObjectAccess().getConstrainedByKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_4__1__Impl
	rule__MyObject__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_1()); }
(rule__MyObject__MyObjectHasAssignment_4_1)
{ after(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getGroup_4_2()); }
(rule__MyObject__Group_4_2__0)*
{ after(grammarAccess.getMyObjectAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyObject__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_4_2__0__Impl
	rule__MyObject__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getCommaKeyword_4_2_0()); }

	',' 

{ after(grammarAccess.getMyObjectAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyObject__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyObject__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_2_1()); }
(rule__MyObject__MyObjectHasAssignment_4_2_1)
{ after(grammarAccess.getMyObjectAccess().getMyObjectHasAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyConstraint__Group__0__Impl
	rule__MyConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getMyConstraintAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyConstraint__Group__1__Impl
	rule__MyConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getMyIfConstraintAssignment_1()); }
(rule__MyConstraint__MyIfConstraintAssignment_1)
{ after(grammarAccess.getMyConstraintAccess().getMyIfConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyConstraint__Group__2__Impl
	rule__MyConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getMyConstraintAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getMyThenConstraintAssignment_3()); }
(rule__MyConstraint__MyThenConstraintAssignment_3)
{ after(grammarAccess.getMyConstraintAccess().getMyThenConstraintAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MyAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyAttribute__Group__0__Impl
	rule__MyAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getNameAssignment_0()); }
(rule__MyAttribute__NameAssignment_0)
{ after(grammarAccess.getMyAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyAttribute__Group__1__Impl
	rule__MyAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getMyAttributeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyAttribute__Group__2__Impl
	rule__MyAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getMyAttributeContainsAssignment_2()); }
(rule__MyAttribute__MyAttributeContainsAssignment_2)
{ after(grammarAccess.getMyAttributeAccess().getMyAttributeContainsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyAttribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyAttribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getMyAttributeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MyBinary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBinary__Group__0__Impl
	rule__MyBinary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getMyBinaryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBinary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBinary__Group__1__Impl
	rule__MyBinary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getMyBinaryLeftAssignment_1()); }
(rule__MyBinary__MyBinaryLeftAssignment_1)
{ after(grammarAccess.getMyBinaryAccess().getMyBinaryLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBinary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBinary__Group__2__Impl
	rule__MyBinary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getOparandAssignment_2()); }
(rule__MyBinary__OparandAssignment_2)
{ after(grammarAccess.getMyBinaryAccess().getOparandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBinary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBinary__Group__3__Impl
	rule__MyBinary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getMyBinaryRightAssignment_3()); }
(rule__MyBinary__MyBinaryRightAssignment_3)
{ after(grammarAccess.getMyBinaryAccess().getMyBinaryRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBinary__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBinary__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMyBinaryAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MyUnary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyUnary__Group__0__Impl
	rule__MyUnary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyUnary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyUnaryAccess().getOparandAssignment_0()); }
(rule__MyUnary__OparandAssignment_0)
{ after(grammarAccess.getMyUnaryAccess().getOparandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyUnary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyUnary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyUnary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyUnaryAccess().getMyUnaryExpressionAssignment_1()); }
(rule__MyUnary__MyUnaryExpressionAssignment_1)
{ after(grammarAccess.getMyUnaryAccess().getMyUnaryExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyBoolean__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBoolean__Group__0__Impl
	rule__MyBoolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBoolean__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBooleanAccess().getTrueValueAssignment_0()); }
(rule__MyBoolean__TrueValueAssignment_0)
{ after(grammarAccess.getMyBooleanAccess().getTrueValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBoolean__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBoolean__Group__1__Impl
	rule__MyBoolean__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBoolean__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBooleanAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getMyBooleanAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyBoolean__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyBoolean__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyBoolean__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBooleanAccess().getFalseValueAssignment_2()); }
(rule__MyBoolean__FalseValueAssignment_2)
{ after(grammarAccess.getMyBooleanAccess().getFalseValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIdentifier__Group__0__Impl
	rule__MyIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIdentifierAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMyIdentifierAccess().getAsteriskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsAssignment_1()); }
(rule__MyIdentifier__MyIntentifierIsAssignment_1)
{ after(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyRange__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyRange__Group__0__Impl
	rule__MyRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRange__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyRangeAccess().getFromAssignment_0()); }
(rule__MyRange__FromAssignment_0)
{ after(grammarAccess.getMyRangeAccess().getFromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyRange__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyRange__Group__1__Impl
	rule__MyRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRange__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyRangeAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getMyRangeAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyRange__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyRange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRange__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyRangeAccess().getToAssignment_2()); }
(rule__MyRange__ToAssignment_2)
{ after(grammarAccess.getMyRangeAccess().getToAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyStringEnum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringEnum__Group__0__Impl
	rule__MyStringEnum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getValuesAssignment_0()); }
(rule__MyStringEnum__ValuesAssignment_0)
{ after(grammarAccess.getMyStringEnumAccess().getValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyStringEnum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringEnum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getGroup_1()); }
(rule__MyStringEnum__Group_1__0)*
{ after(grammarAccess.getMyStringEnumAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyStringEnum__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringEnum__Group_1__0__Impl
	rule__MyStringEnum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getMyStringEnumAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyStringEnum__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringEnum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getValuesAssignment_1_1()); }
(rule__MyStringEnum__ValuesAssignment_1_1)
{ after(grammarAccess.getMyStringEnumAccess().getValuesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyNumberEnum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyNumberEnum__Group__0__Impl
	rule__MyNumberEnum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getValuesAssignment_0()); }
(rule__MyNumberEnum__ValuesAssignment_0)
{ after(grammarAccess.getMyNumberEnumAccess().getValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyNumberEnum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyNumberEnum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getGroup_1()); }
(rule__MyNumberEnum__Group_1__0)*
{ after(grammarAccess.getMyNumberEnumAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyNumberEnum__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyNumberEnum__Group_1__0__Impl
	rule__MyNumberEnum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getMyNumberEnumAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyNumberEnum__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyNumberEnum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getValuesAssignment_1_1()); }
(rule__MyNumberEnum__ValuesAssignment_1_1)
{ after(grammarAccess.getMyNumberEnumAccess().getValuesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EDouble__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0__0__Impl
	rule__EDouble__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0__1__Impl
	rule__EDouble__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_1()); }
(	RULE_INT)?
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0__2__Impl
	rule__EDouble__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getFullStopKeyword_0_2()); }

	'.' 

{ after(grammarAccess.getEDoubleAccess().getFullStopKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0__3__Impl
	rule__EDouble__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_3()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getGroup_0_4()); }
(rule__EDouble__Group_0_4__0)?
{ after(grammarAccess.getEDoubleAccess().getGroup_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EDouble__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0_4__0__Impl
	rule__EDouble__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getAlternatives_0_4_0()); }
(rule__EDouble__Alternatives_0_4_0)
{ after(grammarAccess.getEDoubleAccess().getAlternatives_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0_4__1__Impl
	rule__EDouble__Group_0_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0_4_1()); }
(
	'-' 
)?
{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_0_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group_0_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_0_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_4_2()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__MyModel__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getMyModelAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__MyModelContainsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getMyModelContainsMyObjectParserRuleCall_2_1_0()); }
	rulemyObject{ after(grammarAccess.getMyModelAccess().getMyModelContainsMyObjectParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyModel__MyModelContainsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyModelAccess().getMyModelContainsMyObjectParserRuleCall_2_2_1_0()); }
	rulemyObject{ after(grammarAccess.getMyModelAccess().getMyModelContainsMyObjectParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getMyObjectAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__MyAttributeContainsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyAttributeContainsMyAttributeParserRuleCall_3_1_0()); }
	rulemyAttribute{ after(grammarAccess.getMyObjectAccess().getMyAttributeContainsMyAttributeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__MyAttributeContainsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyAttributeContainsMyAttributeParserRuleCall_3_2_1_0()); }
	rulemyAttribute{ after(grammarAccess.getMyObjectAccess().getMyAttributeContainsMyAttributeParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__MyObjectHasAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyObjectHasMyConstraintParserRuleCall_4_1_0()); }
	rulemyConstraint{ after(grammarAccess.getMyObjectAccess().getMyObjectHasMyConstraintParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__MyObjectHasAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyObjectAccess().getMyObjectHasMyConstraintParserRuleCall_4_2_1_0()); }
	rulemyConstraint{ after(grammarAccess.getMyObjectAccess().getMyObjectHasMyConstraintParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__MyIfConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getMyIfConstraintMyConcreteExpressionParserRuleCall_1_0()); }
	rulemyConcreteExpression{ after(grammarAccess.getMyConstraintAccess().getMyIfConstraintMyConcreteExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyConstraint__MyThenConstraintAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConstraintAccess().getMyThenConstraintMyConcreteExpressionParserRuleCall_3_0()); }
	rulemyConcreteExpression{ after(grammarAccess.getMyConstraintAccess().getMyThenConstraintMyConcreteExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getMyAttributeAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyAttribute__MyAttributeContainsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyAttributeAccess().getMyAttributeContainsMyValueParserRuleCall_2_0()); }
	rulemyValue{ after(grammarAccess.getMyAttributeAccess().getMyAttributeContainsMyValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyConcreteExpression__MyConcreteExAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyConcreteExpressionAccess().getMyConcreteExMyExpressionParserRuleCall_0()); }
	rulemyExpression{ after(grammarAccess.getMyConcreteExpressionAccess().getMyConcreteExMyExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__MyBinaryLeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getMyBinaryLeftMyConcreteExpressionParserRuleCall_1_0()); }
	rulemyConcreteExpression{ after(grammarAccess.getMyBinaryAccess().getMyBinaryLeftMyConcreteExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__OparandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getOparandMyBinaryOparatorsEnumRuleCall_2_0()); }
	rulemyBinaryOparators{ after(grammarAccess.getMyBinaryAccess().getOparandMyBinaryOparatorsEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBinary__MyBinaryRightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBinaryAccess().getMyBinaryRightMyConcreteExpressionParserRuleCall_3_0()); }
	rulemyConcreteExpression{ after(grammarAccess.getMyBinaryAccess().getMyBinaryRightMyConcreteExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyUnary__OparandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyUnaryAccess().getOparandMyUnaryOparatorsEnumRuleCall_0_0()); }
	rulemyUnaryOparators{ after(grammarAccess.getMyUnaryAccess().getOparandMyUnaryOparatorsEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyUnary__MyUnaryExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyUnaryAccess().getMyUnaryExpressionMyConcreteExpressionParserRuleCall_1_0()); }
	rulemyConcreteExpression{ after(grammarAccess.getMyUnaryAccess().getMyUnaryExpressionMyConcreteExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBoolean__TrueValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBooleanAccess().getTrueValueEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getMyBooleanAccess().getTrueValueEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBoolean__FalseValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBooleanAccess().getFalseValueEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getMyBooleanAccess().getFalseValueEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__MyIntentifierIsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsMyAttributeCrossReference_1_0()); }
(
{ before(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsMyAttributeEStringParserRuleCall_1_0_1()); }
	ruleEString{ after(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsMyAttributeEStringParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMyIdentifierAccess().getMyIntentifierIsMyAttributeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyRange__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyRangeAccess().getFromINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getMyRangeAccess().getFromINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyRange__ToAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyRangeAccess().getToINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getMyRangeAccess().getToINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__ValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getValuesEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getMyStringEnumAccess().getValuesEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringEnum__ValuesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringEnumAccess().getValuesEStringParserRuleCall_1_1_0()); }
	ruleEString{ after(grammarAccess.getMyStringEnumAccess().getValuesEStringParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__ValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getValuesEDoubleParserRuleCall_0_0()); }
	ruleEDouble{ after(grammarAccess.getMyNumberEnumAccess().getValuesEDoubleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyNumberEnum__ValuesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyNumberEnumAccess().getValuesEDoubleParserRuleCall_1_1_0()); }
	ruleEDouble{ after(grammarAccess.getMyNumberEnumAccess().getValuesEDoubleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


