/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmdpDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMyModelContainsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMyModelContainsMyObjectParserRuleCall_2_1_0 = (RuleCall)cMyModelContainsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMyModelContainsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMyModelContainsMyObjectParserRuleCall_2_2_1_0 = (RuleCall)cMyModelContainsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//myModel:
		//	{myModel} name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?;
		public ParserRule getRule() { return rule; }

		//{myModel} name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?
		public Group getGroup() { return cGroup; }

		//{myModel}
		public Action getMyModelAction_0() { return cMyModelAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//myModelContains+=myObject
		public Assignment getMyModelContainsAssignment_2_1() { return cMyModelContainsAssignment_2_1; }

		//myObject
		public RuleCall getMyModelContainsMyObjectParserRuleCall_2_1_0() { return cMyModelContainsMyObjectParserRuleCall_2_1_0; }

		//("," myModelContains+=myObject)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//myModelContains+=myObject
		public Assignment getMyModelContainsAssignment_2_2_1() { return cMyModelContainsAssignment_2_2_1; }

		//myObject
		public RuleCall getMyModelContainsMyObjectParserRuleCall_2_2_1_0() { return cMyModelContainsMyObjectParserRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class MyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyBinaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyUnaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMyIntParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMyIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//myExpression:
		//	myBinary | myUnary | myString | myInt | BoolLiteral | myIdentifier;
		public ParserRule getRule() { return rule; }

		//myBinary | myUnary | myString | myInt | BoolLiteral | myIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//myBinary
		public RuleCall getMyBinaryParserRuleCall_0() { return cMyBinaryParserRuleCall_0; }

		//myUnary
		public RuleCall getMyUnaryParserRuleCall_1() { return cMyUnaryParserRuleCall_1; }

		//myString
		public RuleCall getMyStringParserRuleCall_2() { return cMyStringParserRuleCall_2; }

		//myInt
		public RuleCall getMyIntParserRuleCall_3() { return cMyIntParserRuleCall_3; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_4() { return cBoolLiteralParserRuleCall_4; }

		//myIdentifier
		public RuleCall getMyIdentifierParserRuleCall_5() { return cMyIdentifierParserRuleCall_5; }
	}

	public class MyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyRangeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//myValue:
		//	myEnum | BooleanValue | myRange;
		public ParserRule getRule() { return rule; }

		//myEnum | BooleanValue | myRange
		public Alternatives getAlternatives() { return cAlternatives; }

		//myEnum
		public RuleCall getMyEnumParserRuleCall_0() { return cMyEnumParserRuleCall_0; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_1() { return cBooleanValueParserRuleCall_1; }

		//myRange
		public RuleCall getMyRangeParserRuleCall_2() { return cMyRangeParserRuleCall_2; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class MyObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMyAttributeContainsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMyAttributeContainsMyAttributeParserRuleCall_3_1_0 = (RuleCall)cMyAttributeContainsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMyAttributeContainsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMyAttributeContainsMyAttributeParserRuleCall_3_2_1_0 = (RuleCall)cMyAttributeContainsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMyAttributeContainsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMyObjectHasAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMyObjectHasMyConstraintParserRuleCall_4_2_0 = (RuleCall)cMyObjectHasAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cMyObjectHasAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cMyObjectHasMyConstraintParserRuleCall_4_3_1_0 = (RuleCall)cMyObjectHasAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//myObject:
		//	{myObject} name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)?
		//	("myAttributeContains" "{" myObjectHas+=myConstraint ("," myObjectHas+=myConstraint)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{myObject} name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)?
		//("myAttributeContains" "{" myObjectHas+=myConstraint ("," myObjectHas+=myConstraint)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{myObject}
		public Action getMyObjectAction_0() { return cMyObjectAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"has"
		public Keyword getHasKeyword_3_0() { return cHasKeyword_3_0; }

		//myAttributeContains+=myAttribute
		public Assignment getMyAttributeContainsAssignment_3_1() { return cMyAttributeContainsAssignment_3_1; }

		//myAttribute
		public RuleCall getMyAttributeContainsMyAttributeParserRuleCall_3_1_0() { return cMyAttributeContainsMyAttributeParserRuleCall_3_1_0; }

		//("," myAttributeContains+=myAttribute)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//myAttributeContains+=myAttribute
		public Assignment getMyAttributeContainsAssignment_3_2_1() { return cMyAttributeContainsAssignment_3_2_1; }

		//myAttribute
		public RuleCall getMyAttributeContainsMyAttributeParserRuleCall_3_2_1_0() { return cMyAttributeContainsMyAttributeParserRuleCall_3_2_1_0; }

		//("myAttributeContains" "{" myObjectHas+=myConstraint ("," myObjectHas+=myConstraint)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"myAttributeContains"
		public Keyword getMyAttributeContainsKeyword_4_0() { return cMyAttributeContainsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//myObjectHas+=myConstraint
		public Assignment getMyObjectHasAssignment_4_2() { return cMyObjectHasAssignment_4_2; }

		//myConstraint
		public RuleCall getMyObjectHasMyConstraintParserRuleCall_4_2_0() { return cMyObjectHasMyConstraintParserRuleCall_4_2_0; }

		//("," myObjectHas+=myConstraint)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//myObjectHas+=myConstraint
		public Assignment getMyObjectHasAssignment_4_3_1() { return cMyObjectHasAssignment_4_3_1; }

		//myConstraint
		public RuleCall getMyObjectHasMyConstraintParserRuleCall_4_3_1_0() { return cMyObjectHasMyConstraintParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMyConstraintContainsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMyConstraintContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMyConstraintContainsMyExpressionParserRuleCall_3_0 = (RuleCall)cMyConstraintContainsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//myConstraint:
		//	"myConstraint" "{" "myConstraintContains" myConstraintContains=myExpression "}";
		public ParserRule getRule() { return rule; }

		//"myConstraint" "{" "myConstraintContains" myConstraintContains=myExpression "}"
		public Group getGroup() { return cGroup; }

		//"myConstraint"
		public Keyword getMyConstraintKeyword_0() { return cMyConstraintKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"myConstraintContains"
		public Keyword getMyConstraintContainsKeyword_2() { return cMyConstraintContainsKeyword_2; }

		//myConstraintContains=myExpression
		public Assignment getMyConstraintContainsAssignment_3() { return cMyConstraintContainsAssignment_3; }

		//myExpression
		public RuleCall getMyConstraintContainsMyExpressionParserRuleCall_3_0() { return cMyConstraintContainsMyExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMyAttributeContainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMyAttributeContainsMyValueParserRuleCall_2_0 = (RuleCall)cMyAttributeContainsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//myAttribute:
		//	name=EString "[" myAttributeContains=myValue "]";
		public ParserRule getRule() { return rule; }

		//name=EString "[" myAttributeContains=myValue "]"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//myAttributeContains=myValue
		public Assignment getMyAttributeContainsAssignment_2() { return cMyAttributeContainsAssignment_2; }

		//myValue
		public RuleCall getMyAttributeContainsMyValueParserRuleCall_2_0() { return cMyAttributeContainsMyValueParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MyBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyBinaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOparandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOparandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOparandMyBinaryOparatorsEnumRuleCall_2_1_0 = (RuleCall)cOparandAssignment_2_1.eContents().get(0);
		private final Keyword cMyBinaryLeftKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMyBinaryLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMyBinaryLeftMyExpressionParserRuleCall_4_0 = (RuleCall)cMyBinaryLeftAssignment_4.eContents().get(0);
		private final Keyword cMyBinaryRightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMyBinaryRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMyBinaryRightMyExpressionParserRuleCall_6_0 = (RuleCall)cMyBinaryRightAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//myBinary:
		//	"myBinary" "{" ("Oparand" Oparand=myBinaryOparators)? "myBinaryLeft" myBinaryLeft=myExpression "myBinaryRight"
		//	myBinaryRight=myExpression "}";
		public ParserRule getRule() { return rule; }

		//"myBinary" "{" ("Oparand" Oparand=myBinaryOparators)? "myBinaryLeft" myBinaryLeft=myExpression "myBinaryRight"
		//myBinaryRight=myExpression "}"
		public Group getGroup() { return cGroup; }

		//"myBinary"
		public Keyword getMyBinaryKeyword_0() { return cMyBinaryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("Oparand" Oparand=myBinaryOparators)?
		public Group getGroup_2() { return cGroup_2; }

		//"Oparand"
		public Keyword getOparandKeyword_2_0() { return cOparandKeyword_2_0; }

		//Oparand=myBinaryOparators
		public Assignment getOparandAssignment_2_1() { return cOparandAssignment_2_1; }

		//myBinaryOparators
		public RuleCall getOparandMyBinaryOparatorsEnumRuleCall_2_1_0() { return cOparandMyBinaryOparatorsEnumRuleCall_2_1_0; }

		//"myBinaryLeft"
		public Keyword getMyBinaryLeftKeyword_3() { return cMyBinaryLeftKeyword_3; }

		//myBinaryLeft=myExpression
		public Assignment getMyBinaryLeftAssignment_4() { return cMyBinaryLeftAssignment_4; }

		//myExpression
		public RuleCall getMyBinaryLeftMyExpressionParserRuleCall_4_0() { return cMyBinaryLeftMyExpressionParserRuleCall_4_0; }

		//"myBinaryRight"
		public Keyword getMyBinaryRightKeyword_5() { return cMyBinaryRightKeyword_5; }

		//myBinaryRight=myExpression
		public Assignment getMyBinaryRightAssignment_6() { return cMyBinaryRightAssignment_6; }

		//myExpression
		public RuleCall getMyBinaryRightMyExpressionParserRuleCall_6_0() { return cMyBinaryRightMyExpressionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MyUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myUnary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyUnaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOparandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOparandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOparandMyUnaryOparatorsEnumRuleCall_2_1_0 = (RuleCall)cOparandAssignment_2_1.eContents().get(0);
		private final Keyword cMyUnaryExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMyUnaryExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMyUnaryExpressionMyExpressionParserRuleCall_4_0 = (RuleCall)cMyUnaryExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//myUnary:
		//	"myUnary" "{" ("Oparand" Oparand=myUnaryOparators)? "myUnaryExpression" myUnaryExpression=myExpression "}";
		public ParserRule getRule() { return rule; }

		//"myUnary" "{" ("Oparand" Oparand=myUnaryOparators)? "myUnaryExpression" myUnaryExpression=myExpression "}"
		public Group getGroup() { return cGroup; }

		//"myUnary"
		public Keyword getMyUnaryKeyword_0() { return cMyUnaryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("Oparand" Oparand=myUnaryOparators)?
		public Group getGroup_2() { return cGroup_2; }

		//"Oparand"
		public Keyword getOparandKeyword_2_0() { return cOparandKeyword_2_0; }

		//Oparand=myUnaryOparators
		public Assignment getOparandAssignment_2_1() { return cOparandAssignment_2_1; }

		//myUnaryOparators
		public RuleCall getOparandMyUnaryOparatorsEnumRuleCall_2_1_0() { return cOparandMyUnaryOparatorsEnumRuleCall_2_1_0; }

		//"myUnaryExpression"
		public Keyword getMyUnaryExpressionKeyword_3() { return cMyUnaryExpressionKeyword_3; }

		//myUnaryExpression=myExpression
		public Assignment getMyUnaryExpressionAssignment_4() { return cMyUnaryExpressionAssignment_4; }

		//myExpression
		public RuleCall getMyUnaryExpressionMyExpressionParserRuleCall_4_0() { return cMyUnaryExpressionMyExpressionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAnyURIParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//myString:
		//	"myString" "{" "value" value=AnyURI "}";
		public ParserRule getRule() { return rule; }

		//"myString" "{" "value" value=AnyURI "}"
		public Group getGroup() { return cGroup; }

		//"myString"
		public Keyword getMyStringKeyword_0() { return cMyStringKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=AnyURI
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AnyURI
		public RuleCall getValueAnyURIParserRuleCall_3_0() { return cValueAnyURIParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MyIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueInt0ParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//myInt:
		//	"myInt" "{" "value" value=Int0 "}";
		public ParserRule getRule() { return rule; }

		//"myInt" "{" "value" value=Int0 "}"
		public Group getGroup() { return cGroup; }

		//"myInt"
		public Keyword getMyIntKeyword_0() { return cMyIntKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=Int0
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Int0
		public RuleCall getValueInt0ParserRuleCall_3_0() { return cValueInt0ParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBooleanParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolLiteral:
		//	"BoolLiteral" "{" "value" value=Boolean "}";
		public ParserRule getRule() { return rule; }

		//"BoolLiteral" "{" "value" value=Boolean "}"
		public Group getGroup() { return cGroup; }

		//"BoolLiteral"
		public Keyword getBoolLiteralKeyword_0() { return cBoolLiteralKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=Boolean
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Boolean
		public RuleCall getValueBooleanParserRuleCall_3_0() { return cValueBooleanParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MyIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMyIdentifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMyIntentifierIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMyIntentifierIsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMyIntentifierIsMyAttributeCrossReference_3_0 = (CrossReference)cMyIntentifierIsAssignment_3.eContents().get(0);
		private final RuleCall cMyIntentifierIsMyAttributeEStringParserRuleCall_3_0_1 = (RuleCall)cMyIntentifierIsMyAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//myIdentifier:
		//	"myIdentifier" "{" "myIntentifierIs" myIntentifierIs=[myAttribute|EString] "}";
		public ParserRule getRule() { return rule; }

		//"myIdentifier" "{" "myIntentifierIs" myIntentifierIs=[myAttribute|EString] "}"
		public Group getGroup() { return cGroup; }

		//"myIdentifier"
		public Keyword getMyIdentifierKeyword_0() { return cMyIdentifierKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"myIntentifierIs"
		public Keyword getMyIntentifierIsKeyword_2() { return cMyIntentifierIsKeyword_2; }

		//myIntentifierIs=[myAttribute|EString]
		public Assignment getMyIntentifierIsAssignment_3() { return cMyIntentifierIsAssignment_3; }

		//[myAttribute|EString]
		public CrossReference getMyIntentifierIsMyAttributeCrossReference_3_0() { return cMyIntentifierIsMyAttributeCrossReference_3_0; }

		//EString
		public RuleCall getMyIntentifierIsMyAttributeEStringParserRuleCall_3_0_1() { return cMyIntentifierIsMyAttributeEStringParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
		//	"AnyURI";
		public ParserRule getRule() { return rule; }

		//"AnyURI"
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}

	public class Int0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Int0");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Int0 returns type::Int:
		//	"Int";
		public ParserRule getRule() { return rule; }

		//"Int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
		//	"Boolean";
		public ParserRule getRule() { return rule; }

		//"Boolean"
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}

	public class MyEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesAnySimpleTypeParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesAnySimpleTypeParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//myEnum:
		//	values+=AnySimpleType ("," values+=AnySimpleType)*;
		public ParserRule getRule() { return rule; }

		//values+=AnySimpleType ("," values+=AnySimpleType)*
		public Group getGroup() { return cGroup; }

		//values+=AnySimpleType
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//AnySimpleType
		public RuleCall getValuesAnySimpleTypeParserRuleCall_0_0() { return cValuesAnySimpleTypeParserRuleCall_0_0; }

		//("," values+=AnySimpleType)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=AnySimpleType
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//AnySimpleType
		public RuleCall getValuesAnySimpleTypeParserRuleCall_1_1_0() { return cValuesAnySimpleTypeParserRuleCall_1_1_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrueValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrueValueAnyURIParserRuleCall_0_0 = (RuleCall)cTrueValueAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFalseValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFalseValueAnyURIParserRuleCall_2_0 = (RuleCall)cFalseValueAssignment_2.eContents().get(0);
		
		//BooleanValue:
		//	trueValue=AnyURI ":" falseValue=AnyURI;
		public ParserRule getRule() { return rule; }

		//trueValue=AnyURI ":" falseValue=AnyURI
		public Group getGroup() { return cGroup; }

		//trueValue=AnyURI
		public Assignment getTrueValueAssignment_0() { return cTrueValueAssignment_0; }

		//AnyURI
		public RuleCall getTrueValueAnyURIParserRuleCall_0_0() { return cTrueValueAnyURIParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//falseValue=AnyURI
		public Assignment getFalseValueAssignment_2() { return cFalseValueAssignment_2; }

		//AnyURI
		public RuleCall getFalseValueAnyURIParserRuleCall_2_0() { return cFalseValueAnyURIParserRuleCall_2_0; }
	}

	public class MyRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeAnySimpleTypeParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeAnySimpleTypeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//myRange:
		//	range=AnySimpleType "-" range=AnySimpleType;
		public ParserRule getRule() { return rule; }

		//range=AnySimpleType "-" range=AnySimpleType
		public Group getGroup() { return cGroup; }

		//range=AnySimpleType
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }

		//AnySimpleType
		public RuleCall getRangeAnySimpleTypeParserRuleCall_0_0() { return cRangeAnySimpleTypeParserRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//range=AnySimpleType
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//AnySimpleType
		public RuleCall getRangeAnySimpleTypeParserRuleCall_2_0() { return cRangeAnySimpleTypeParserRuleCall_2_0; }
	}

	public class AnySimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnySimpleType");
		private final Keyword cAnySimpleTypeKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
		//	"AnySimpleType";
		public ParserRule getRule() { return rule; }

		//"AnySimpleType"
		public Keyword getAnySimpleTypeKeyword() { return cAnySimpleTypeKeyword; }
	}
	
	
	public class MyBinaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "myBinaryOparators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGtGtKeyword_2_0 = (Keyword)cGtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLtLtKeyword_3_0 = (Keyword)cLtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqEqKeyword_4_0 = (Keyword)cEqEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIsIsKeyword_5_0 = (Keyword)cIsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIfEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIfIfKeyword_6_0 = (Keyword)cIfEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cThenEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cThenThenKeyword_7_0 = (Keyword)cThenEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum myBinaryOparators:
		//	and | or | gt | lt | eq | is | if | then;
		public EnumRule getRule() { return rule; }

		//and | or | gt | lt | eq | is | if | then
		public Alternatives getAlternatives() { return cAlternatives; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }

		//gt
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_2() { return cGtEnumLiteralDeclaration_2; }

		//"gt"
		public Keyword getGtGtKeyword_2_0() { return cGtGtKeyword_2_0; }

		//lt
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_3() { return cLtEnumLiteralDeclaration_3; }

		//"lt"
		public Keyword getLtLtKeyword_3_0() { return cLtLtKeyword_3_0; }

		//eq
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_4() { return cEqEnumLiteralDeclaration_4; }

		//"eq"
		public Keyword getEqEqKeyword_4_0() { return cEqEqKeyword_4_0; }

		//is
		public EnumLiteralDeclaration getIsEnumLiteralDeclaration_5() { return cIsEnumLiteralDeclaration_5; }

		//"is"
		public Keyword getIsIsKeyword_5_0() { return cIsIsKeyword_5_0; }

		//if
		public EnumLiteralDeclaration getIfEnumLiteralDeclaration_6() { return cIfEnumLiteralDeclaration_6; }

		//"if"
		public Keyword getIfIfKeyword_6_0() { return cIfIfKeyword_6_0; }

		//then
		public EnumLiteralDeclaration getThenEnumLiteralDeclaration_7() { return cThenEnumLiteralDeclaration_7; }

		//"then"
		public Keyword getThenThenKeyword_7_0() { return cThenThenKeyword_7_0; }
	}

	public class MyUnaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "myUnaryOparators");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum myUnaryOparators:
		//	not;
		public EnumRule getRule() { return rule; }

		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	
	private MyModelElements pMyModel;
	private MyExpressionElements pMyExpression;
	private MyValueElements pMyValue;
	private EStringElements pEString;
	private MyObjectElements pMyObject;
	private MyConstraintElements pMyConstraint;
	private MyAttributeElements pMyAttribute;
	private MyBinaryElements pMyBinary;
	private MyUnaryElements pMyUnary;
	private MyStringElements pMyString;
	private MyIntElements pMyInt;
	private BoolLiteralElements pBoolLiteral;
	private MyIdentifierElements pMyIdentifier;
	private MyBinaryOparatorsElements unknownRuleMyBinaryOparators;
	private MyUnaryOparatorsElements unknownRuleMyUnaryOparators;
	private AnyURIElements pAnyURI;
	private Int0Elements pInt0;
	private BooleanElements pBoolean;
	private MyEnumElements pMyEnum;
	private BooleanValueElements pBooleanValue;
	private MyRangeElements pMyRange;
	private AnySimpleTypeElements pAnySimpleType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmdpDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.SmdpDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//myModel:
	//	{myModel} name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?;
	public MyModelElements getMyModelAccess() {
		return (pMyModel != null) ? pMyModel : (pMyModel = new MyModelElements());
	}
	
	public ParserRule getMyModelRule() {
		return getMyModelAccess().getRule();
	}

	//myExpression:
	//	myBinary | myUnary | myString | myInt | BoolLiteral | myIdentifier;
	public MyExpressionElements getMyExpressionAccess() {
		return (pMyExpression != null) ? pMyExpression : (pMyExpression = new MyExpressionElements());
	}
	
	public ParserRule getMyExpressionRule() {
		return getMyExpressionAccess().getRule();
	}

	//myValue:
	//	myEnum | BooleanValue | myRange;
	public MyValueElements getMyValueAccess() {
		return (pMyValue != null) ? pMyValue : (pMyValue = new MyValueElements());
	}
	
	public ParserRule getMyValueRule() {
		return getMyValueAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//myObject:
	//	{myObject} name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)?
	//	("myAttributeContains" "{" myObjectHas+=myConstraint ("," myObjectHas+=myConstraint)* "}")? "}";
	public MyObjectElements getMyObjectAccess() {
		return (pMyObject != null) ? pMyObject : (pMyObject = new MyObjectElements());
	}
	
	public ParserRule getMyObjectRule() {
		return getMyObjectAccess().getRule();
	}

	//myConstraint:
	//	"myConstraint" "{" "myConstraintContains" myConstraintContains=myExpression "}";
	public MyConstraintElements getMyConstraintAccess() {
		return (pMyConstraint != null) ? pMyConstraint : (pMyConstraint = new MyConstraintElements());
	}
	
	public ParserRule getMyConstraintRule() {
		return getMyConstraintAccess().getRule();
	}

	//myAttribute:
	//	name=EString "[" myAttributeContains=myValue "]";
	public MyAttributeElements getMyAttributeAccess() {
		return (pMyAttribute != null) ? pMyAttribute : (pMyAttribute = new MyAttributeElements());
	}
	
	public ParserRule getMyAttributeRule() {
		return getMyAttributeAccess().getRule();
	}

	//myBinary:
	//	"myBinary" "{" ("Oparand" Oparand=myBinaryOparators)? "myBinaryLeft" myBinaryLeft=myExpression "myBinaryRight"
	//	myBinaryRight=myExpression "}";
	public MyBinaryElements getMyBinaryAccess() {
		return (pMyBinary != null) ? pMyBinary : (pMyBinary = new MyBinaryElements());
	}
	
	public ParserRule getMyBinaryRule() {
		return getMyBinaryAccess().getRule();
	}

	//myUnary:
	//	"myUnary" "{" ("Oparand" Oparand=myUnaryOparators)? "myUnaryExpression" myUnaryExpression=myExpression "}";
	public MyUnaryElements getMyUnaryAccess() {
		return (pMyUnary != null) ? pMyUnary : (pMyUnary = new MyUnaryElements());
	}
	
	public ParserRule getMyUnaryRule() {
		return getMyUnaryAccess().getRule();
	}

	//myString:
	//	"myString" "{" "value" value=AnyURI "}";
	public MyStringElements getMyStringAccess() {
		return (pMyString != null) ? pMyString : (pMyString = new MyStringElements());
	}
	
	public ParserRule getMyStringRule() {
		return getMyStringAccess().getRule();
	}

	//myInt:
	//	"myInt" "{" "value" value=Int0 "}";
	public MyIntElements getMyIntAccess() {
		return (pMyInt != null) ? pMyInt : (pMyInt = new MyIntElements());
	}
	
	public ParserRule getMyIntRule() {
		return getMyIntAccess().getRule();
	}

	//BoolLiteral:
	//	"BoolLiteral" "{" "value" value=Boolean "}";
	public BoolLiteralElements getBoolLiteralAccess() {
		return (pBoolLiteral != null) ? pBoolLiteral : (pBoolLiteral = new BoolLiteralElements());
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//myIdentifier:
	//	"myIdentifier" "{" "myIntentifierIs" myIntentifierIs=[myAttribute|EString] "}";
	public MyIdentifierElements getMyIdentifierAccess() {
		return (pMyIdentifier != null) ? pMyIdentifier : (pMyIdentifier = new MyIdentifierElements());
	}
	
	public ParserRule getMyIdentifierRule() {
		return getMyIdentifierAccess().getRule();
	}

	//enum myBinaryOparators:
	//	and | or | gt | lt | eq | is | if | then;
	public MyBinaryOparatorsElements getMyBinaryOparatorsAccess() {
		return (unknownRuleMyBinaryOparators != null) ? unknownRuleMyBinaryOparators : (unknownRuleMyBinaryOparators = new MyBinaryOparatorsElements());
	}
	
	public EnumRule getMyBinaryOparatorsRule() {
		return getMyBinaryOparatorsAccess().getRule();
	}

	//enum myUnaryOparators:
	//	not;
	public MyUnaryOparatorsElements getMyUnaryOparatorsAccess() {
		return (unknownRuleMyUnaryOparators != null) ? unknownRuleMyUnaryOparators : (unknownRuleMyUnaryOparators = new MyUnaryOparatorsElements());
	}
	
	public EnumRule getMyUnaryOparatorsRule() {
		return getMyUnaryOparatorsAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
	//	"AnyURI";
	public AnyURIElements getAnyURIAccess() {
		return (pAnyURI != null) ? pAnyURI : (pAnyURI = new AnyURIElements());
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Int0 returns type::Int:
	//	"Int";
	public Int0Elements getInt0Access() {
		return (pInt0 != null) ? pInt0 : (pInt0 = new Int0Elements());
	}
	
	public ParserRule getInt0Rule() {
		return getInt0Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
	//	"Boolean";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//myEnum:
	//	values+=AnySimpleType ("," values+=AnySimpleType)*;
	public MyEnumElements getMyEnumAccess() {
		return (pMyEnum != null) ? pMyEnum : (pMyEnum = new MyEnumElements());
	}
	
	public ParserRule getMyEnumRule() {
		return getMyEnumAccess().getRule();
	}

	//BooleanValue:
	//	trueValue=AnyURI ":" falseValue=AnyURI;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//myRange:
	//	range=AnySimpleType "-" range=AnySimpleType;
	public MyRangeElements getMyRangeAccess() {
		return (pMyRange != null) ? pMyRange : (pMyRange = new MyRangeElements());
	}
	
	public ParserRule getMyRangeRule() {
		return getMyRangeAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
	//	"AnySimpleType";
	public AnySimpleTypeElements getAnySimpleTypeAccess() {
		return (pAnySimpleType != null) ? pAnySimpleType : (pAnySimpleType = new AnySimpleTypeElements());
	}
	
	public ParserRule getAnySimpleTypeRule() {
		return getAnySimpleTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
