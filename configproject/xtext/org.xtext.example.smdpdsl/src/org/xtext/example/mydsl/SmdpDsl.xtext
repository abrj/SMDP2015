// automatically generated by Xtext
grammar org.xtext.example.mydsl.SmdpDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/ConfiguratorProject/model/configuratorProject.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

myModel returns myModel:
	{myModel}
	name=EString
		('{' myModelContains+=myObject ( "," myModelContains+=myObject)* '}' )?
	;




myExpression returns myExpression:
	myBinary | myUnary | myString | myInt | BoolLiteral | myIdentifier;

myValue returns myValue:
	myEnum | BooleanValue | myRange;

EString returns ecore::EString:
	STRING | ID;

myObject returns myObject:
	{myObject}
	name=EString
	'{'
		('has' myAttributeContains+=myAttribute  ( "," myAttributeContains+=myAttribute)* )?
		('myAttributeContains' '{' myObjectHas+=myConstraint ( "," myObjectHas+=myConstraint)* '}' )?	
	'}';

myConstraint returns myConstraint:
	'myConstraint'
	'{'
		'myConstraintContains' myConstraintContains=myExpression
	'}';

myAttribute returns myAttribute:	
	name=EString
	'['
		myAttributeContains=myValue
	']';

myBinary returns myBinary:
	'myBinary'
	'{'
		('Oparand' Oparand=myBinaryOparators)?
		'myBinaryLeft' myBinaryLeft=myExpression
		'myBinaryRight' myBinaryRight=myExpression
	'}';

myUnary returns myUnary:
	'myUnary'
	'{'
		('Oparand' Oparand=myUnaryOparators)?
		'myUnaryExpression' myUnaryExpression=myExpression
	'}';

myString returns myString:
	'myString'
	'{'
		'value' value=AnyURI
	'}';

myInt returns myInt:
	'myInt'
	'{'
		'value' value=Int0
	'}';

BoolLiteral returns BoolLiteral:
	'BoolLiteral'
	'{'
		'value' value=Boolean
	'}';

myIdentifier returns myIdentifier:
	'myIdentifier'
	'{'
		'myIntentifierIs' myIntentifierIs=[myAttribute|EString]
	'}';

enum myBinaryOparators returns myBinaryOparators:
				and = 'and' | or = 'or' | gt = 'gt' | lt = 'lt' | eq = 'eq' | is = 'is' | if = 'if' | then = 'then';

enum myUnaryOparators returns myUnaryOparators:
				not = 'not';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

myEnum returns myEnum:	
		values+=AnySimpleType ( "," values+=AnySimpleType)* 
	;

BooleanValue returns BooleanValue:
		trueValue=AnyURI ':'
		falseValue=AnyURI
	;

myRange returns myRange:
		range=AnySimpleType '-' range=AnySimpleType
	;

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType' /* TODO: implement this rule and an appropriate IValueConverter */;
