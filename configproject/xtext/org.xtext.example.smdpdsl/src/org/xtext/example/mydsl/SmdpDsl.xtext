// automatically generated by Xtext
grammar org.xtext.example.mydsl.SmdpDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/ConfiguratorProject/model/configuratorProject.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

myModel:
	name=EString
		('{' myModelContains+=myObject ( "," myModelContains+=myObject)* '}' )?
	;

myValue returns myValue:
	myBoolean | myRange | myNumberEnum | myStringEnum; // myStringEnum | 


EString returns ecore::EString:
	STRING | ID;

myObject:
	name=EString
	'{'
		('has' myAttributeContains+=myAttribute  ( "," myAttributeContains+=myAttribute)* )?
		('Constrained by' myObjectHas+=myConstraint (myObjectHas+=myConstraint)* )?	
	'}';

myConstraint returns myConstraint:
		'if' myIfConstraint=myBinary 'then' myThenConstraint=myBinary
	;

myAttribute returns myAttribute:
	name=EString
	'['
		myAttributeContains=myValue
	']';


myBinary returns myExpression:
		myUnary ({myBinary.myBinaryLeft=current} Oparand=myBinaryOparators myBinaryRight=myUnary)*			
;
// ( and ) is with  for fixing left recur...
myPrimary returns myExpression:
	 myBoolean | myRange | myNumberEnum | myIdentifier | '(' myBinary ')' | myStringEnum  
;

myUnary returns myExpression:
	 {myUnary} (Oparand=myUnaryOparators
	 myUnaryExpression=myPrimary) | myPrimary
;

myBoolean returns myBoolean:
		trueValue=STRING ':'
		falseValue=STRING
	;

myIdentifier returns myIdentifier:
	myIntentifierIs=[myAttribute|ID];

myRange returns myRange:
	from=INT '-' to=INT
	;

myStringEnum returns myStringEnum:
values+=STRING ( "," values+=STRING)* ;

myNumberEnum returns myNumberEnum:
	values+=EDouble ( "," values+=EDouble)*;

enum myBinaryOparators returns myBinaryOparators:
				and = '&&' | or = '|' | gt = '<' | lt = '>' | eq = '=' | is = 'can' //| if = 'if' | then = 'then'
;

enum myUnaryOparators returns myUnaryOparators:
				not = 'not';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	('-'? INT? '.' INT (('E'|'e') '-'? INT)?) | EInt;
