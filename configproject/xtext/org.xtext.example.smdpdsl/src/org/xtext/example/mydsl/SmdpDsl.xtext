// automatically generated by Xtext
grammar org.xtext.example.mydsl.SmdpDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/ConfiguratorProject/model/configuratorProject.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

myModel returns myModel:
	{myModel}
	name=EString
		('{' myModelContains+=myObject ( "," myModelContains+=myObject)* '}' )?
	;





myValue returns myValue:
	myBoolean | myRange | myStringEnum | myNumberEnum;

myExpression returns myExpression:
	myBinary | myUnary | myBoolean | myRange | myStringEnum | myNumberEnum | myIdentifier;

EString returns ecore::EString:
	STRING | ID;

myObject returns myObject:
{myObject}
	name=EString
	'{'
		('has' myAttributeContains+=myAttribute  ( "," myAttributeContains+=myAttribute)* )?
		('Constrained by' myObjectHas+=myConstraint ( "," myObjectHas+=myConstraint)* )?	
	'}';


myConstraint returns myConstraint:
		'if' myIfConstraint=myConcreteExpression
		'then' myThenConstraint=myConcreteExpression
	;

myAttribute returns myAttribute:
	name=EString
	'['
		myAttributeContains=myValue
	']';

myConcreteExpression returns myConcreteExpression:
myConcreteEx=myExpression
;

myBinary returns myBinary:
	'('
		myBinaryLeft=myConcreteExpression
		(Oparand=myBinaryOparators)
		myBinaryRight=myConcreteExpression
		')'
;

myUnary returns myUnary:

		(Oparand=myUnaryOparators)
		myUnaryExpression=myConcreteExpression
	;

myBoolean returns myBoolean:
		trueValue=EString ':'
		falseValue=EString
	;

myIdentifier returns myIdentifier:
	'*'myIntentifierIs=[myAttribute|EString];

myRange returns myRange:
	from=INT '-' to=INT
	;

myStringEnum returns myStringEnum:
values+=EString ( "," values+=EString)* ;

myNumberEnum returns myNumberEnum:
	values+=EDouble ( "," values+=EDouble)*;

enum myBinaryOparators returns myBinaryOparators:
				and = '&&' | or = '|' | gt = '<' | lt = '>' | eq = '=' | is = 'can' | if = 'if' | then = 'then';

enum myUnaryOparators returns myUnaryOparators:
				not = 'not';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	('-'? INT? '.' INT (('E'|'e') '-'? INT)?) | EInt;
