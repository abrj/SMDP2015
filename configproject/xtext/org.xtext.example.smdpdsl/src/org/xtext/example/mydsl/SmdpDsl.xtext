// automatically generated by Xtext
grammar org.xtext.example.mydsl.SmdpDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/ConfiguratorProject/model/configuratorProject.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

myModel returns myModel:
	{myModel}
	name=EString
		('{' myModelContains+=myObject ( "," myModelContains+=myObject)* '}' )?
	;




myExpression returns myExpression:
	myBinary | myUnary | myString | myInt | BoolLiteral | myIdentifier;

myValue returns myValue:
	myEnum | BooleanValue | myRange;

EString returns ecore::EString:
	STRING | ID;

myObject returns myObject:
	{myObject}
	name=EString
	'{'
		('has' myAttributeContains+=myAttribute  ( "," myAttributeContains+=myAttribute)* )?
		('Constrained by' myObjectHas+=myConstraint ( "," myObjectHas+=myConstraint)* )?	
	'}';

myConstraint returns myConstraint:
	'if' myConstraintContains=myExpression
	'then' myConstraintContains=myExpression
	;

myAttribute returns myAttribute:	
	name=EString
	'['
		myAttributeContains=myValue
	']';

myBinary returns myBinary:
		'left' myBinaryLeft=myExpression // Fix left rec, remove empty quote
		( Oparand=myBinaryOparators)?
		'right' myBinaryRight=myExpression
	;

myUnary returns myUnary:
		(Oparand=myUnaryOparators)?
		'single' myUnaryExpression=myExpression // Fix left rec, remove empty quote
;

myString returns myString:
	value=AnyURI;

myInt returns myInt:
	value=INT;

BoolLiteral returns BoolLiteral:
value=Boolean;

myIdentifier returns myIdentifier:
	myIntentifierIs=[myAttribute|EString];

enum myBinaryOparators returns myBinaryOparators:
				and = '&&' | or = '|' | gt = '<' | lt = '>' | eq = '=' | is = 'can' | if = 'if' | then = 'then';

enum myUnaryOparators returns myUnaryOparators:
				not = 'not';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

myEnum returns myEnum:	
		values+=EString ( "," values+=EString)* 
	;

BooleanValue returns BooleanValue:
		trueValue=EString ':'
		falseValue=EString
	;

myRange returns myRange:
		range=INT '-' range=INT
	;

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType' /* TODO: implement this rule and an appropriate IValueConverter */;