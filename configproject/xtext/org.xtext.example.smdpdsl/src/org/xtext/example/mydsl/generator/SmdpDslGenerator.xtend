/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import configuratorProject.myAttribute
import configuratorProject.myConstraint
import configuratorProject.myBinary;
import configuratorProject.myIdentifier;
import configuratorProject.*;

import java.util.*;

import configuratorProject.myStringEnum


/**
 * Generates code from your model files on save.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SmdpDslGenerator implements IGenerator {	

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//Getting the attributes and constraints
		val attributes = resource.allContents.filter(typeof(myAttribute)).toList();
		val constraints = resource.allContents.filter(typeof(myConstraint)).toList();
		
		//Generate HTML file
   	  	val xhtmlFileName = "generated/pages/asdf.html"
   	  	fsa.generateFile(xhtmlFileName, generateHtmlMarkup(generateDropDown(attributes)))
   	  	
   	  	
   	  	//Generate Java file
   	  	val javaCode = generateJavaCode(attributes, constraints);
   	  	val javaFile = "generated/java/HelloWorld.java"
   	  	fsa.generateFile(javaFile, javaCode);
   	  	
	}
	

	
	def generateDropDown(List<myAttribute> attributes) '''
	«FOR attr:attributes»
	<p>«attr.name»:</p> <select>
	«IF attr.myAttributeContains instanceof myStringEnum»
	«FOR v:(attr.myAttributeContains as myStringEnum).values»
	<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myNumberEnum»
	«FOR v:(attr.myAttributeContains as myNumberEnum).values»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myRange»
	«FOR v:(attr.myAttributeContains as myRange).from..(attr.myAttributeContains as myRange).to»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myBoolean»
	<option value="«(attr.myAttributeContains as myBoolean).trueValue»">«(attr.myAttributeContains as myBoolean).trueValue»</option>
	<option value="«(attr.myAttributeContains as myBoolean).falseValue»">«(attr.myAttributeContains as myBoolean).falseValue»</option>
	«ENDIF»
	</select>
	«ENDFOR»
	'''
	

	
	def generateHtmlMarkup(CharSequence content)'''
	<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
</head>
<body>
«content»
</body>
</html>'''

def String generateIfConstraintString(myBinary it, myIdentifier attribute, myBinaryOparators parentOperand){
	  	var myIdentifier att;
	  	var myBinaryOparators pOpe;
	  	// If left is a identifier, get the attribute
	  	if (it.myBinaryLeft instanceof myIdentifier) {
	  		att = it.myBinaryLeft as myIdentifier;
	  		pOpe = it.oparand;
	  		
	  	} else {
	  		att = attribute;
	  		pOpe = parentOperand;
	  	}
	  	
	  	// If both left and right are binaries, then both sides must be true
	  	if (it.myBinaryLeft instanceof myBinary && it.myBinaryRight instanceof myBinary)	{
	  		return "(" + generateIfConstraintString(it.myBinaryLeft as myBinary, att, pOpe) + " " + convertOperand(oparand) + " " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe) +")"
	  	}
	  	
	  	if (it.myBinaryLeft instanceof myIdentifier && it.myBinaryRight instanceof myBinary) {
				return generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe)
	  	}

		if (it.myBinaryLeft instanceof myValue && it.myBinaryRight instanceof myValue) {
			if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
			return "(" + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + " " +  (myBinaryLeft as myNumberEnum).values.get(0) + " || " + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + " " +  (myBinaryRight as myNumberEnum).values.get(0) + ")";
			}
			if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
			return "(" + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + "  \"" +  (myBinaryLeft as myStringEnum).values.get(0) + "\" || " + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + " \"" +  (myBinaryRight as myStringEnum).values.get(0) + "\")";
			}
		}
		
		if (it.myBinaryLeft instanceof myValue && it.myBinaryRight instanceof myBinary) {
			if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
				return "(" + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + " " +  (myBinaryLeft as myNumberEnum).values.get(0) + " || " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe) + ")"
			}
			if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
				return "(" + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(pOpe) + " \"" +  (myBinaryLeft as myStringEnum).values.get(0) + "\" || " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe) + ")"
			}
		}
	  	
	  	if (it.myBinaryLeft instanceof myIdentifier && it.myBinaryRight instanceof myValue) {
	  		if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
	  			return "("+ ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(oparand) + " " + (myBinaryRight as myNumberEnum).values.get(0) + ")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
	  			return "("+ ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(oparand) + " \"" + (myBinaryRight as myStringEnum).values.get(0) + "\")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myRange) {
	  			return "(" + (att.myIntentifierIs.myAttributeContains as myRange).from + " <= " + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " && " + (att.myIntentifierIs.myAttributeContains as myRange).to + " >= " + ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + ")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myBoolean) {
	  			return "("+ ConvertAttributeName(att.myIntentifierIs.name, att.myIntentifierIs.myAttributeContains) + " " + convertOperand(oparand) + " \"" + (myBinaryRight as myStringEnum).values.get(0) + "\")";
	  		}
	  		
	  	}
	  	return "FUCKED!"
}

def String ConvertAttributeName(String name, myValue type) {
	if (type instanceof myRange || type instanceof myNumberEnum) {
		return "Double.parseDouble(chosenValues.get(\"" + name + "\"))";
	}
	return "chosenValues.get(\"" + name + "\")"
}

def String generateThenConstraintString(myBinary it, myIdentifier attribute){
	
	if (it.myBinaryLeft instanceof myBinary && it.myBinaryRight instanceof myBinary){
	  		return generateThenConstraintString(it.myBinaryLeft as myBinary, null) + generateThenConstraintString(it.myBinaryRight as myBinary, null);
	  	}	
	
	var myIdentifier att;
	  	// If left is a identifier, get the attribute
	  	if (it.myBinaryLeft instanceof myIdentifier) {
	  		att = it.myBinaryLeft as myIdentifier;	  		
	  	} else {
	  		att = attribute;
	  	}
	  	
	  	if (it.myBinaryLeft instanceof myIdentifier && it.myBinaryRight instanceof myValue) {
	  		var StringBuilder sb = new StringBuilder();
	  		if (it.myBinaryRight instanceof myStringEnum) {
	  			for(v: (it.myBinaryRight as myStringEnum).values) {
	  				sb.append("add(\""+ v +"\");");
	  				
	  			}
	  			return "l = new ArrayList<String>(){{
			" + sb.toString +"}};" +
	  		"removeNonPossibleValuesFromAttribute(\""+ att.myIntentifierIs.name  +"\", l, \"" + it.oparand + "\");"
	  		}
	  		if (it.myBinaryRight instanceof myNumberEnum) {
	  			for(v: (it.myBinaryRight as myNumberEnum).values) {
	  				sb.append("add("+ v +");");
	  			}
	  			return "q = new ArrayList<Double>(){{
			" + sb.toString +"}};" +
	  		"removeNonPossibleValuesFromAttributeNumber(\""+ att.myIntentifierIs.name  +"\", q, \"" + it.oparand + "\");"
	  		}
	  		
	  	
	  		
	  		
	  	}
	  	
	  	
	  	return "";
}

def String convertOperand(myBinaryOparators operand) {
	if (operand == myBinaryOparators.EQ) {
		return "=="
	}
	
	if (operand == myBinaryOparators.AND) {
		return "&&"
	}
	
	if (operand == myBinaryOparators.OR) {
		return "||"
	}
	
	if (operand == myBinaryOparators.LT) {
		return ">"
	}
	if (operand == myBinaryOparators.GT) {
		return "<"
	}
	if (operand == myBinaryOparators.IS) {
		return "=="
	}
	
}

def generateJavaCode(List<myAttribute> attributes, List<myConstraint> constraints) {
'''

import org.eclipse.xtext.xbase.lib.InputOutput;
import java.util.*;
//XML parsing imports below
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

 
public class HelloWorld {
	public static HashMap<String, List<String>> constraintMap;
	public static HashMap<String, String> chosenValues;
	public static List<String> l;
	public static List<Double> q;
	«FOR a:attributes»
	«IF a.myAttributeContains instanceof myNumberEnum»
	public static double «a.name»;
	«ELSEIF a.myAttributeContains instanceof myRange»
	public static double «a.name»;
	«ELSE»
	public static String «a.name»;
	«ENDIF»
	«ENDFOR»
  public static void main(final String[] args) {
    InputOutput.<String>println("LETS GET TO IT..");
    List<String> l;
    HashMap<String, List<String>> hm = new HashMap<String, List<String>>();
    
    
««« Make hashmap of attribute list
    «FOR a:attributes»
    «IF a.myAttributeContains instanceof myStringEnum»
    l = new ArrayList<String>();
	«FOR v:(a.myAttributeContains as myStringEnum).values»
	l.add("«v»");
	«ENDFOR»
	hm.put("«a.name»", l);
	«ENDIF»
	
	«IF a.myAttributeContains instanceof myNumberEnum»
	l = new ArrayList<String>();
	«FOR v:(a.myAttributeContains as myNumberEnum).values»
	l.add("«v»");
	«ENDFOR»
	hm.put("«a.name»", l);
	«ENDIF»
	
	«IF a.myAttributeContains instanceof myBoolean»
	l = new ArrayList<String>();
	l.add("«(a.myAttributeContains as myBoolean).trueValue»");
	l.add("«(a.myAttributeContains as myBoolean).falseValue»");
	hm.put("«a.name»", l);
	«ENDIF»
	
	«IF a.myAttributeContains instanceof myRange»
	l = new ArrayList<String>();
	«var from = (a.myAttributeContains as myRange).from»
	«var to = (a.myAttributeContains as myRange).to»
	for (int i = «from»; i <= «to»;i++) {
		l.add(i +".0");
		}
	hm.put("«a.name»", l);
	«ENDIF»
	
	«ENDFOR»
	constraintMap = new HashMap<String,List<String>>(hm);
   	//run(hm);
   	doSomething();
    //goXML(attrSelection, valueSelection);
  }
  
  public static void removeNonPossibleValuesFromAttribute(String attr, List<String> possibleValues, String operator){
  	List<String> values = constraintMap.get(attr);
  	for(int i = values.size()-1; i >= 0; i--){
  		String currentValue = values.get(i);
  		if(operator == "is"){
  			if(!possibleValues.contains(currentValue)){
  			values.remove(i);
  			}
  		}
  		
  	}
  	constraintMap.put(attr,values);
  }
  
  public static void removeNonPossibleValuesFromAttributeNumber(String attr, List<Double> possibleValues, String operator){
  	List<String> values = constraintMap.get(attr);
  	for(int i = values.size()-1; i >= 0; i--){
  		String currentValue = values.get(i);
  		double doubleValue = Double.parseDouble(currentValue);
  		if(operator == "is"){
  			if(!possibleValues.contains(doubleValue)){
  			values.remove(i);
  			}
  		}
  		if(operator == "lt"){
  			if(doubleValue < possibleValues.get(0)){
  				values.remove(i);
  			}
  		}
  		
  		if(operator == "gt"){
  			if(doubleValue > possibleValues.get(0)){
  				values.remove(i);
  			}
  		}
  	}
  	constraintMap.put(attr,values);
  }
  
  public static void buildConstraints() {
  	««« Make java code from constraints
	«FOR con:constraints»
	«val exprIf = con.myIfConstraint as myBinary»
	«val exprThen = con.myThenConstraint as myBinary»
	if «generateIfConstraintString(exprIf, null, null)»{
		«generateThenConstraintString(exprThen, null)»
	}
	«ENDFOR»
  }
  
  public static boolean checkConstraints() {
  List<String> values;
  String value;
  «FOR a:attributes»
   values = constraintMap.get("«a.name»");
  value = chosenValues.get("«a.name»");
	if (values.size() > 0) {
		System.out.println(value);
		if (!values.contains(value)) {
			return false;
			}
		} else {
			return false;
		}
	«ENDFOR»
	return true;
  }  
  
        public static void run(HashMap<String, List<String>> hm, String[] attrSelection, String[] valueSelection){
        	chosenValues = new HashMap<String, String>();
            String[] split;
            String type;
            String attrName;
            Scanner in = new Scanner(System.in);
            int userchoice;
            List<String> stringValues;
			List<String> values;
            int j = 0;

            for (String attr : hm.keySet() ) {
                //Splits the datatype from the attribute string and sets the attrName to the attribute name without the datatype
                split = attr.split(",");
                attrName = split[0];
                values = hm.get(attr);
                type = split[1];
                System.out.println(attrName + "\n");
                stringValues = hm.get(attr);
                int i = 0;
                rangeInt = 0;
                //checks if the datatype is "range", if it is rangeInt variable saves the first number of the range and later subtracts it from the number
                //entered by the user to make sure the number held in the arrayList and the number entered by the user is the same
                if (type.equals("range")){
                    rangeInt = Integer.parseInt(stringValues.get(0));
                    System.out.println("Select a range from " + stringValues.get(0) + " to " + stringValues.get(stringValues.size()-1));
                }else {
                    for(String s : stringValues){

                        System.out.println(i + " : " + s);
                        i++;
                    }
                }

                System.out.println("Select a number for " + attrName + "\n");
                System.out.println("Type of data " + type + "\n");
                //saves the selected attribute for xml parsing
                attrSelection[j] = attrName;

                userchoice = Integer.parseInt(in.nextLine())-rangeInt;
                System.out.println("you choose " + stringValues.get(userchoice));
                if (type.equals("range") || type.equals("number")) {
                	chosenValues.put(attrName, stringValues.get(userchoice)+".0");
                } else {
                	chosenValues.put(attrName, stringValues.get(userchoice));
                }

                //saves the selected value for xml parsing
                valueSelection[j] = stringValues.get(userchoice);
                ++j;
            }
  	buildConstraints();
  	System.out.println(checkConstraints());
        }

    public static Integer rangeInt = 0;
    public static void doSomething() {
            InputOutput.<String>println("LETS GET TO IT..");
            List<String> l;
            HashMap<String, List<String>> hm = new HashMap<String, List<String>>();


            «FOR a:attributes»
            «IF a.myAttributeContains instanceof myStringEnum»
            l = new ArrayList<String>();
            «FOR v:(a.myAttributeContains as myStringEnum).values»
            l.add("«v»");
            «ENDFOR»
            hm.put("«a.name»,string", l);
            «ENDIF»

            «IF a.myAttributeContains instanceof myNumberEnum»
            l = new ArrayList<String>();
            «FOR v:(a.myAttributeContains as myNumberEnum).values»
            l.add("«v»");
            «ENDFOR»
            hm.put("«a.name»,number", l);
            «ENDIF»

            «IF a.myAttributeContains instanceof myRange»
            l = new ArrayList<String>();
            «FOR v:(a.myAttributeContains as myRange).from..(a.myAttributeContains as myRange).to»
            l.add("«v»");
            «ENDFOR»
            hm.put("«a.name»,range", l);
            «ENDIF»

            «IF a.myAttributeContains instanceof myBoolean»
            l = new ArrayList<String>();
            l.add("«(a.myAttributeContains as myBoolean).trueValue»");
            l.add("«(a.myAttributeContains as myBoolean).falseValue»");
            hm.put("«a.name»,boolean", l);
            «ENDIF»
            «ENDFOR»
               	String[] attrSelection = new String[hm.size()];
    			String[] valueSelection = new String[hm.values().size()];
				run(hm, attrSelection, valueSelection);
            }
    public static void goXML(String[] as, String[] vs ) {
            System.out.println("Attribute: " + Arrays.toString(as) + "Value: " + Arrays.toString(vs));
            try {

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // root elements
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement("Attributes");
            doc.appendChild(rootElement);

            // attribute elements
            for (int i = 0; i < as.length; i++) {
            Element attribute = doc.createElement(as[i]);
            rootElement.appendChild(attribute);
            Element value = doc.createElement("value");
            value.appendChild(doc.createTextNode(vs[i]));
            attribute.appendChild(value);
            }


            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File("C:\\Users\\Rune\\Desktop\\YESSS.xml"));

            // Output to console for testing
            // StreamResult result = new StreamResult(System.out);

            transformer.transform(source, result);

            System.out.println("FILE SAVED TO DESKTOP #YOLO");

            } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
            } catch (TransformerException tfe) {
            tfe.printStackTrace();
            }
            }
            }
'''
}
}
