/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import configuratorProject.myAttribute
import configuratorProject.myConstraint
import configuratorProject.myBinary;
import configuratorProject.myIdentifier;
import configuratorProject.*;
import java.util.List
import java.util.Iterator
import configuratorProject.myStringEnum

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SmdpDslGenerator implements IGenerator {
	

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//Getting the attributes and constraints
		val attributes = resource.allContents.filter(typeof(myAttribute)).toList();
		val constraints = resource.allContents.filter(typeof(myConstraint)).toList();
		
		//Generate HTML file
   	  	val xhtmlFileName = "generated/pages/asdf.html"
   	  	fsa.generateFile(xhtmlFileName, generateHtmlMarkup(generateDropDown(attributes)))
   	  	
   	  	
   	  	//Generate Java file
   	  	val javaCode = generateJavaCode(attributes, constraints);
   	  	val javaFile = "generated/java/HelloWorld.java"
   	  	fsa.generateFile(javaFile, javaCode);
   	  	
	}
	

	
	def generateDropDown(List<myAttribute> attributes) '''
	«FOR attr:attributes»
	<p>«attr.name»:</p> <select>
	«IF attr.myAttributeContains instanceof myStringEnum»
	«FOR v:(attr.myAttributeContains as myStringEnum).values»
	<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myNumberEnum»
	«FOR v:(attr.myAttributeContains as myNumberEnum).values»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myRange»
	«FOR v:(attr.myAttributeContains as myRange).from..(attr.myAttributeContains as myRange).to»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myBoolean»
	<option value="«(attr.myAttributeContains as myBoolean).trueValue»">«(attr.myAttributeContains as myBoolean).trueValue»</option>
	<option value="«(attr.myAttributeContains as myBoolean).falseValue»">«(attr.myAttributeContains as myBoolean).falseValue»</option>
	«ENDIF»
	</select>
	«ENDFOR»
	'''
	

	
	def generateHtmlMarkup(CharSequence content)'''
	<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
</head>
<body>
«content»
</body>
</html>'''

def String generateIfConstraintString(myBinary it, myIdentifier attribute, myBinaryOparators parentOperand){
	  	var myIdentifier att;
	  	var myBinaryOparators pOpe;
	  	// If left is a identifier, get the attribute
	  	if (it.myBinaryLeft instanceof myIdentifier) {
	  		att = it.myBinaryLeft as myIdentifier;
	  		pOpe = it.oparand;
	  		
	  	} else {
	  		att = attribute;
	  		pOpe = parentOperand;
	  	}
	  	
	  	// If both left and right are binaries, then both sides must be true
	  	if (it.myBinaryLeft instanceof myBinary && it.myBinaryRight instanceof myBinary)	{
	  		return generateIfConstraintString(it.myBinaryLeft as myBinary, att, pOpe) + " " + convertOperand(oparand) + " " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe)
	  	}
	  	
	  	if (it.myBinaryLeft instanceof myIdentifier && it.myBinaryRight instanceof myBinary) {
				return generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe)
	  	}

		if (it.myBinaryLeft instanceof myValue && it.myBinaryRight instanceof myValue) {
			if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
			return "(" + att.myIntentifierIs.name + " " + convertOperand(pOpe) + " " +  (myBinaryLeft as myNumberEnum).values.get(0) + " || " + att.myIntentifierIs.name + " " + convertOperand(pOpe) + " " +  (myBinaryRight as myNumberEnum).values.get(0) + ")";
			}
			if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
			return "(" + att.myIntentifierIs.name + " " + convertOperand(pOpe) + "  \"" +  (myBinaryLeft as myStringEnum).values.get(0) + "\" || " + att.myIntentifierIs.name + " " + convertOperand(pOpe) + " \"" +  (myBinaryRight as myStringEnum).values.get(0) + "\")";
			}
		}
		
		if (it.myBinaryLeft instanceof myValue && it.myBinaryRight instanceof myBinary) {
			if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
				return "(" + att.myIntentifierIs.name + " " + convertOperand(pOpe) + " " +  (myBinaryLeft as myNumberEnum).values.get(0) + " || " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe) + ")"
			}
			if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
				return "(" + att.myIntentifierIs.name + " " + convertOperand(pOpe) + " \"" +  (myBinaryLeft as myStringEnum).values.get(0) + "\" || " + generateIfConstraintString(it.myBinaryRight as myBinary, att, pOpe) + ")"
			}
		}
	  	
	  	if (it.myBinaryLeft instanceof myIdentifier && it.myBinaryRight instanceof myValue) {
	  		if (att.myIntentifierIs.myAttributeContains instanceof myNumberEnum) {
	  			return "("+ att.myIntentifierIs.name + " " + convertOperand(oparand) + " " + (myBinaryRight as myNumberEnum).values.get(0) + ")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myStringEnum) {
	  			return "("+ att.myIntentifierIs.name + " " + convertOperand(oparand) + " \"" + (myBinaryRight as myStringEnum).values.get(0) + "\")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myRange) {
	  			return "(" + (att.myIntentifierIs.myAttributeContains as myRange).from + " <= " + att.myIntentifierIs.name + " && " + (att.myIntentifierIs.myAttributeContains as myRange).to + " >= " + att.myIntentifierIs.name + ")";
	  		}
	  		
	  		if (att.myIntentifierIs.myAttributeContains instanceof myBoolean) {
	  			return "("+ att.myIntentifierIs.name + " " + convertOperand(oparand) + " \"" + (myBinaryRight as myStringEnum).values.get(0) + "\")";
	  		}
	  		
	  	}
	  	return "FUCKED!"
}

def String convertOperand(myBinaryOparators operand) {
	if (operand == myBinaryOparators.EQ) {
		return "=="
	}
	
	if (operand == myBinaryOparators.AND) {
		return "&&"
	}
	
	if (operand == myBinaryOparators.OR) {
		return "||"
	}
	
	if (operand == myBinaryOparators.LT) {
		return ">"
	}
	if (operand == myBinaryOparators.GT) {
		return "<"
	}
	if (operand == myBinaryOparators.IS) {
		return "=="
	}
	
}

def generateJavaCode(List<myAttribute> attributes, List<myConstraint> constraints)
'''

import org.eclipse.xtext.xbase.lib.InputOutput;
import java.util.*;

 
public class HelloWorld {
  public static void main(final String[] args) {
    InputOutput.<String>println("LETS GET TO IT..");
    List<String> l;
    HashMap<String, List<String>> hm = new HashMap<String, List<String>>();
    
««« Make hashmap of attribute list
    «FOR a:attributes»
    «IF a.myAttributeContains instanceof myStringEnum»
    l = new ArrayList<String>();
	«FOR v:(a.myAttributeContains as myStringEnum).values»
	l.add("«v»");
	
	
	«ENDFOR»
	hm.put("«a.name»", l);
	«ENDIF»
	«ENDFOR»
        
        
««« Make java code from constraints
	«FOR con:constraints»
	«val exprIf = con.myIfConstraint as myBinary»
	if «generateIfConstraintString(exprIf, null, null)»{
		then 
	}
	«ENDFOR»
	
	
   	run(hm);
  }
  
  
  public static void run(HashMap<String, List<String>> hm){
  	Scanner in = new Scanner(System.in);
  	int userchoice;
  	List<String> values;
   	for (String attr : hm.keySet() ) {
        System.out.println(attr + "\n");
        values = hm.get(attr);
        int i = 0;
        for(String s : values){
        		System.out.println(i + " : " + s);
        		i++;
        	}
        System.out.println("Select a number for " + attr + "\n");
  	 	userchoice = Integer.parseInt(in.nextLine());
  	 	if(0 <= userchoice && userchoice <=i){
  	 		System.out.println("you chose " + values.get(userchoice));
  	 	}
  	 	else{
  	 		System.out.println("wrong index given, skipping this attribute option");	
  	 	}
  		
  	}
  }
}
'''

}
