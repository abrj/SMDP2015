/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import configuratorProject.myAttribute
import configuratorProject.*;
import java.util.List
import java.util.Iterator
import configuratorProject.myStringEnum

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SmdpDslGenerator implements IGenerator {
	

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val attributes = resource.allContents.filter(typeof(myAttribute)).toList();
   	  	val xhtmlFileName = "generated/pages/asdf.html"
   	  	fsa.generateFile(xhtmlFileName, generateHtmlMarkup(generateDropDown(attributes)))
   	  	
   	  	
   	  	//Generate Java code
   	  	val javaCode = generateJavaCode(attributes);
   	  	val javaFile = "generated/java/HelloWorld.java"
   	  	fsa.generateFile(javaFile, javaCode);
   	  	
   	  	
	}
	
	def generateDropDown(List<myAttribute> attributes) '''
	«FOR attr:attributes»
	<p>«attr.name»:</p> <select>
	«IF attr.myAttributeContains instanceof myStringEnum»
	«FOR v:(attr.myAttributeContains as myStringEnum).values»
	<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myNumberEnum»
	«FOR v:(attr.myAttributeContains as myNumberEnum).values»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myRange»
	«FOR v:(attr.myAttributeContains as myRange).from..(attr.myAttributeContains as myRange).to»
		<option value="«v»">«v»</option>
	«ENDFOR»
	«ENDIF»
	
	«IF attr.myAttributeContains instanceof myBoolean»
	<option value="«(attr.myAttributeContains as myBoolean).trueValue»">«(attr.myAttributeContains as myBoolean).trueValue»</option>
	<option value="«(attr.myAttributeContains as myBoolean).falseValue»">«(attr.myAttributeContains as myBoolean).falseValue»</option>
	«ENDIF»
	
	
	</select>
	«ENDFOR»
	'''
	
	
	
	def generateHtmlMarkup(CharSequence content)'''
	<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
</head>
<body>
«content»
</body>
</html>'''

def generateJavaCode(List<myAttribute> attributes)'''
import org.eclipse.xtext.xbase.lib.InputOutput;
import java.util.*;

 
public class HelloWorld {
  public static void main(final String[] args) {
    InputOutput.<String>println("LETS GET TO IT..");
    List<String> l;
    HashMap<String, List<String>> hm = new HashMap<String, List<String>>();
    
    «FOR a:attributes»
    «IF a.myAttributeContains instanceof myStringEnum»
    l = new ArrayList<String>();
	«FOR v:(a.myAttributeContains as myStringEnum).values»
	l.add("«v»");
	«ENDFOR»
	hm.put("«a.name»", l);
	«ENDIF»
	«ENDFOR»
        
   	run(hm);
  }
  
  public static void run(HashMap<String, List<String>> hm){
  	Iterator it = hm.entrySet().iterator();
  	Scanner in = new Scanner(System.in);
  	String userchoice;
   	while (it.hasNext()) {
        Map.Entry attr = (Map.Entry)it.next();
        System.out.println(attr + "\n");
        List<String> values = hm.get(attr);
        int i = 0;
        for(String s : values){
        		System.out.println(i + " : " + values.get(i));
        		i++;
        	}
        System.out.println("Select a number for " + attr + "\n");
  	 	userchoice = in.nextLine();
  	 	System.out.println("you chose " + values.get(i));
  		
  	}
  }
}
'''

}
