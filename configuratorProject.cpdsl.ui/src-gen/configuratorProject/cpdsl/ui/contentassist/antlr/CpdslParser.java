/*
* generated by Xtext
*/
package configuratorProject.cpdsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import configuratorProject.cpdsl.services.CpdslGrammarAccess;

public class CpdslParser extends AbstractContentAssistParser {
	
	@Inject
	private CpdslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected configuratorProject.cpdsl.ui.contentassist.antlr.internal.InternalCpdslParser createParser() {
		configuratorProject.cpdsl.ui.contentassist.antlr.internal.InternalCpdslParser result = new configuratorProject.cpdsl.ui.contentassist.antlr.internal.InternalCpdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getBinaryOparatorsAccess().getAlternatives(), "rule__BinaryOparators__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getModelAccess().getGroup_3_3(), "rule__Model__Group_3_3__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getObjectAccess().getGroup_4(), "rule__Object__Group_4__0");
					put(grammarAccess.getObjectAccess().getGroup_4_3(), "rule__Object__Group_4_3__0");
					put(grammarAccess.getObjectAccess().getGroup_5(), "rule__Object__Group_5__0");
					put(grammarAccess.getObjectAccess().getGroup_5_3(), "rule__Object__Group_5_3__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
					put(grammarAccess.getBinaryAccess().getGroup_2(), "rule__Binary__Group_2__0");
					put(grammarAccess.getUnaryAccess().getGroup(), "rule__Unary__Group__0");
					put(grammarAccess.getUnaryAccess().getGroup_2(), "rule__Unary__Group_2__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getInt0Access().getGroup(), "rule__Int0__Group__0");
					put(grammarAccess.getBoolLiteralAccess().getGroup(), "rule__BoolLiteral__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumAccess().getGroup_5(), "rule__Enum__Group_5__0");
					put(grammarAccess.getBooleanValueAccess().getGroup(), "rule__BooleanValue__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getModelAccess().getContainsAssignment_3_2(), "rule__Model__ContainsAssignment_3_2");
					put(grammarAccess.getModelAccess().getContainsAssignment_3_3_1(), "rule__Model__ContainsAssignment_3_3_1");
					put(grammarAccess.getObjectAccess().getNameAssignment_2(), "rule__Object__NameAssignment_2");
					put(grammarAccess.getObjectAccess().getHasAssignment_4_2(), "rule__Object__HasAssignment_4_2");
					put(grammarAccess.getObjectAccess().getHasAssignment_4_3_1(), "rule__Object__HasAssignment_4_3_1");
					put(grammarAccess.getObjectAccess().getContainsAssignment_5_2(), "rule__Object__ContainsAssignment_5_2");
					put(grammarAccess.getObjectAccess().getContainsAssignment_5_3_1(), "rule__Object__ContainsAssignment_5_3_1");
					put(grammarAccess.getConstraintAccess().getContainsAssignment_3(), "rule__Constraint__ContainsAssignment_3");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getContainsAssignment_4(), "rule__Attribute__ContainsAssignment_4");
					put(grammarAccess.getBinaryAccess().getOparandAssignment_2_1(), "rule__Binary__OparandAssignment_2_1");
					put(grammarAccess.getBinaryAccess().getLeftAssignment_4(), "rule__Binary__LeftAssignment_4");
					put(grammarAccess.getBinaryAccess().getRightAssignment_6(), "rule__Binary__RightAssignment_6");
					put(grammarAccess.getUnaryAccess().getOparandAssignment_2_1(), "rule__Unary__OparandAssignment_2_1");
					put(grammarAccess.getUnaryAccess().getExpressionAssignment_4(), "rule__Unary__ExpressionAssignment_4");
					put(grammarAccess.getString0Access().getValueAssignment_3(), "rule__String0__ValueAssignment_3");
					put(grammarAccess.getInt0Access().getValueAssignment_3(), "rule__Int0__ValueAssignment_3");
					put(grammarAccess.getBoolLiteralAccess().getValueAssignment_3(), "rule__BoolLiteral__ValueAssignment_3");
					put(grammarAccess.getIdentifierAccess().getIsAssignment_3(), "rule__Identifier__IsAssignment_3");
					put(grammarAccess.getEnumAccess().getValuesAssignment_4(), "rule__Enum__ValuesAssignment_4");
					put(grammarAccess.getEnumAccess().getValuesAssignment_5_1(), "rule__Enum__ValuesAssignment_5_1");
					put(grammarAccess.getBooleanValueAccess().getTrueValueAssignment_3(), "rule__BooleanValue__TrueValueAssignment_3");
					put(grammarAccess.getBooleanValueAccess().getFalseValueAssignment_5(), "rule__BooleanValue__FalseValueAssignment_5");
					put(grammarAccess.getRangeAccess().getRangeAssignment_3(), "rule__Range__RangeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			configuratorProject.cpdsl.ui.contentassist.antlr.internal.InternalCpdslParser typedParser = (configuratorProject.cpdsl.ui.contentassist.antlr.internal.InternalCpdslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CpdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CpdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
