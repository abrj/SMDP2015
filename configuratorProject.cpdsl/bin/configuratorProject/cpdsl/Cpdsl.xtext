// automatically generated by Xtext
grammar configuratorProject.cpdsl.Cpdsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/configuratorProject" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Model returns Model:
	{Model}
	'Model'
	'{'
		('Contains' '{' Contains+=Object ( "," Contains+=Object)* '}' )?
	'}';




Expression returns Expression:
	Binary | Unary | String0 | Int0 | BoolLiteral | Identifier;

Value returns Value:
	Enum | BooleanValue | Range;

Object returns Object:
	{Object}
	'Object'
	name=EString
	'{'
		('Has' '{' Has+=Constraint ( "," Has+=Constraint)* '}' )?
		('Contains' '{' Contains+=Attribute ( "," Contains+=Attribute)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Constraint returns Constraint:
	'Constraint'
	'{'
		'Contains' Contains=Expression
	'}';

Attribute returns Attribute:
	'Attribute'
	name=EString
	'{'
		'Contains' Contains=Value
	'}';

Binary returns Binary:
	'Binary'
	'{'
		('Oparand' Oparand=BinaryOparators)?
		'Left' Left=Expression
		'Right' Right=Expression
	'}';

Unary returns Unary:
	'Unary'
	'{'
		('Oparand' Oparand=UnaryOparators)?
		'Expression' Expression=Expression
	'}';

String0 returns String:
	'String'
	'{'
		'value' value=AnyURI
	'}';

Int0 returns Int:
	'Int'
	'{'
		'value' value=Int1
	'}';

BoolLiteral returns BoolLiteral:
	'BoolLiteral'
	'{'
		'value' value=Boolean
	'}';

Identifier returns Identifier:
	'Identifier'
	'{'
		'Is' Is=[Attribute|EString]
	'}';

enum BinaryOparators returns BinaryOparators:
				and = 'and' | or = 'or' | gt = 'gt' | lt = 'lt' | eq = 'eq' | is = 'is' | if = 'if' | then = 'then';

enum UnaryOparators returns UnaryOparators:
				not = 'not';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Int1 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

Enum returns Enum:
	'Enum'
	'{'
		'values' '{' values+=AnySimpleType ( "," values+=AnySimpleType)* '}' 
	'}';

BooleanValue returns BooleanValue:
	'BooleanValue'
	'{'
		'trueValue' trueValue=AnyURI
		'falseValue' falseValue=AnyURI
	'}';

Range returns Range:
	'Range'
	'{'
		'range' range=AnySimpleType
	'}';

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType' /* TODO: implement this rule and an appropriate IValueConverter */;
