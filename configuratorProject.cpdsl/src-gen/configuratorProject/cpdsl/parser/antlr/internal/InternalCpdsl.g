/*
* generated by Xtext
*/
grammar InternalCpdsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package configuratorProject.cpdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package configuratorProject.cpdsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import configuratorProject.cpdsl.services.CpdslGrammarAccess;

}

@parser::members {

 	private CpdslGrammarAccess grammarAccess;
 	
    public InternalCpdslParser(TokenStream input, CpdslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CpdslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='Model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getModelKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Contains' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getContainsKeyword_3_0());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getContainsObjectParserRuleCall_3_2_0()); 
	    }
		lv_Contains_5_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"Contains",
        		lv_Contains_5_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getContainsObjectParserRuleCall_3_3_1_0()); 
	    }
		lv_Contains_7_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"Contains",
        		lv_Contains_7_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3_4());
    }
)?	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBinaryParserRuleCall_0()); 
    }
    this_Binary_0=ruleBinary
    { 
        $current = $this_Binary_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getUnaryParserRuleCall_1()); 
    }
    this_Unary_1=ruleUnary
    { 
        $current = $this_Unary_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getString0ParserRuleCall_2()); 
    }
    this_String0_2=ruleString0
    { 
        $current = $this_String0_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getInt0ParserRuleCall_3()); 
    }
    this_Int0_3=ruleInt0
    { 
        $current = $this_Int0_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBoolLiteralParserRuleCall_4()); 
    }
    this_BoolLiteral_4=ruleBoolLiteral
    { 
        $current = $this_BoolLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIdentifierParserRuleCall_5()); 
    }
    this_Identifier_5=ruleIdentifier
    { 
        $current = $this_Identifier_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getEnumParserRuleCall_0()); 
    }
    this_Enum_0=ruleEnum
    { 
        $current = $this_Enum_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_1()); 
    }
    this_BooleanValue_1=ruleBooleanValue
    { 
        $current = $this_BooleanValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getRangeParserRuleCall_2()); 
    }
    this_Range_2=ruleRange
    { 
        $current = $this_Range_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getObjectAccess().getObjectAction_0(),
            $current);
    }
)	otherlv_1='Object' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectAccess().getObjectKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='Has' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectAccess().getHasKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getHasConstraintParserRuleCall_4_2_0()); 
	    }
		lv_Has_6_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"Has",
        		lv_Has_6_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getObjectAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getHasConstraintParserRuleCall_4_3_1_0()); 
	    }
		lv_Has_8_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"Has",
        		lv_Has_8_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4_4());
    }
)?(	otherlv_10='Contains' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getObjectAccess().getContainsKeyword_5_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getContainsAttributeParserRuleCall_5_2_0()); 
	    }
		lv_Contains_12_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"Contains",
        		lv_Contains_12_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getObjectAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getContainsAttributeParserRuleCall_5_3_1_0()); 
	    }
		lv_Contains_14_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"Contains",
        		lv_Contains_14_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Constraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getConstraintKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='Contains' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getContainsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getContainsExpressionParserRuleCall_3_0()); 
	    }
		lv_Contains_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"Contains",
        		lv_Contains_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='Contains' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getContainsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getContainsValueParserRuleCall_4_0()); 
	    }
		lv_Contains_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"Contains",
        		lv_Contains_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	 iv_ruleBinary=ruleBinary 
	 { $current=$iv_ruleBinary.current; } 
	 EOF 
;

// Rule Binary
ruleBinary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Binary' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryAccess().getBinaryKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='Oparand' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinaryAccess().getOparandKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getOparandBinaryOparatorsEnumRuleCall_2_1_0()); 
	    }
		lv_Oparand_3_0=ruleBinaryOparators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"Oparand",
        		lv_Oparand_3_0, 
        		"BinaryOparators");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='Left' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryAccess().getLeftKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getLeftExpressionParserRuleCall_4_0()); 
	    }
		lv_Left_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"Left",
        		lv_Left_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='Right' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryAccess().getRightKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getRightExpressionParserRuleCall_6_0()); 
	    }
		lv_Right_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"Right",
        		lv_Right_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinaryAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	 iv_ruleUnary=ruleUnary 
	 { $current=$iv_ruleUnary.current; } 
	 EOF 
;

// Rule Unary
ruleUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Unary' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryAccess().getUnaryKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='Oparand' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryAccess().getOparandKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getOparandUnaryOparatorsEnumRuleCall_2_1_0()); 
	    }
		lv_Oparand_3_0=ruleUnaryOparators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"Oparand",
        		lv_Oparand_3_0, 
        		"UnaryOparators");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='Expression' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryAccess().getExpressionKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_Expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"Expression",
        		lv_Expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleString0
entryRuleString0 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); }
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current; } 
	 EOF 
;

// Rule String0
ruleString0 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='String' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getString0Access().getStringKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getString0Access().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='value' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getString0Access().getValueKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getString0Access().getValueAnyURIParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleAnyURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getString0Rule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"AnyURI");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getString0Access().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleInt0
entryRuleInt0 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInt0Rule()); }
	 iv_ruleInt0=ruleInt0 
	 { $current=$iv_ruleInt0.current; } 
	 EOF 
;

// Rule Int0
ruleInt0 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInt0Access().getIntKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInt0Access().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='value' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInt0Access().getValueKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInt0Access().getValueInt1ParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleInt1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInt0Rule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Int1");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInt0Access().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	 iv_ruleBoolLiteral=ruleBoolLiteral 
	 { $current=$iv_ruleBoolLiteral.current; } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BoolLiteral' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBoolLiteralAccess().getBoolLiteralKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoolLiteralAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='value' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoolLiteralAccess().getValueKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoolLiteralAccess().getValueBooleanParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoolLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBoolLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current; } 
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Identifier' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIdentifierAccess().getIdentifierKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdentifierAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='Is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifierAccess().getIsKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIdentifierAccess().getIsAttributeCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIdentifierAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAnyURI
entryRuleAnyURI returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyURIRule()); } 
	 iv_ruleAnyURI=ruleAnyURI 
	 { $current=$iv_ruleAnyURI.current.getText(); }  
	 EOF 
;

// Rule AnyURI
ruleAnyURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='AnyURI' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnyURIAccess().getAnyURIKeyword()); 
    }

    ;





// Entry rule entryRuleInt1
entryRuleInt1 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInt1Rule()); } 
	 iv_ruleInt1=ruleInt1 
	 { $current=$iv_ruleInt1.current.getText(); }  
	 EOF 
;

// Rule Int1
ruleInt1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInt1Access().getIntKeyword()); 
    }

    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getBooleanKeyword()); 
    }

    ;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='values' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getValuesKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getValuesAnySimpleTypeParserRuleCall_4_0()); 
	    }
		lv_values_4_0=ruleAnySimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"AnySimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getValuesAnySimpleTypeParserRuleCall_5_1_0()); 
	    }
		lv_values_6_0=ruleAnySimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_6_0, 
        		"AnySimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BooleanValue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanValueAccess().getBooleanValueKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanValueAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='trueValue' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanValueAccess().getTrueValueKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanValueAccess().getTrueValueAnyURIParserRuleCall_3_0()); 
	    }
		lv_trueValue_3_0=ruleAnyURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanValueRule());
	        }
       		set(
       			$current, 
       			"trueValue",
        		lv_trueValue_3_0, 
        		"AnyURI");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='falseValue' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanValueAccess().getFalseValueKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanValueAccess().getFalseValueAnyURIParserRuleCall_5_0()); 
	    }
		lv_falseValue_5_0=ruleAnyURI		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanValueRule());
	        }
       		set(
       			$current, 
       			"falseValue",
        		lv_falseValue_5_0, 
        		"AnyURI");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBooleanValueAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Range' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getRangeKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='range' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getRangeKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getRangeAnySimpleTypeParserRuleCall_3_0()); 
	    }
		lv_range_3_0=ruleAnySimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_3_0, 
        		"AnySimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAnySimpleType
entryRuleAnySimpleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnySimpleTypeRule()); } 
	 iv_ruleAnySimpleType=ruleAnySimpleType 
	 { $current=$iv_ruleAnySimpleType.current.getText(); }  
	 EOF 
;

// Rule AnySimpleType
ruleAnySimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='AnySimpleType' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnySimpleTypeAccess().getAnySimpleTypeKeyword()); 
    }

    ;





// Rule BinaryOparators
ruleBinaryOparators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='and' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOparatorsAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOparatorsAccess().getOrEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='gt' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getGtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryOparatorsAccess().getGtEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='lt' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getLtEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinaryOparatorsAccess().getLtEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='eq' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getEqEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBinaryOparatorsAccess().getEqEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='is' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getIsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBinaryOparatorsAccess().getIsEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='if' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getIfEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBinaryOparatorsAccess().getIfEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='then' 
	{
        $current = grammarAccess.getBinaryOparatorsAccess().getThenEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBinaryOparatorsAccess().getThenEnumLiteralDeclaration_7()); 
    }
));



// Rule UnaryOparators
ruleUnaryOparators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not' 
	{
        $current = grammarAccess.getUnaryOparatorsAccess().getNotEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOparatorsAccess().getNotEnumLiteralDeclaration()); 
    }
);



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


