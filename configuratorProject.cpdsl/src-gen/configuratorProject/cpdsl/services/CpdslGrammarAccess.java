/*
* generated by Xtext
*/
package configuratorProject.cpdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CpdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cContainsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cContainsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cContainsObjectParserRuleCall_3_2_0 = (RuleCall)cContainsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cContainsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cContainsObjectParserRuleCall_3_3_1_0 = (RuleCall)cContainsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} "Model" "{" ("Contains" "{" Contains+=Object ("," Contains+=Object)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Model} "Model" "{" ("Contains" "{" Contains+=Object ("," Contains+=Object)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"Model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("Contains" "{" Contains+=Object ("," Contains+=Object)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"Contains"
		public Keyword getContainsKeyword_3_0() { return cContainsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//Contains+=Object
		public Assignment getContainsAssignment_3_2() { return cContainsAssignment_3_2; }

		//Object
		public RuleCall getContainsObjectParserRuleCall_3_2_0() { return cContainsObjectParserRuleCall_3_2_0; }

		//("," Contains+=Object)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//Contains+=Object
		public Assignment getContainsAssignment_3_3_1() { return cContainsAssignment_3_3_1; }

		//Object
		public RuleCall getContainsObjectParserRuleCall_3_3_1_0() { return cContainsObjectParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cString0ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInt0ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	Binary | Unary | String0 | Int0 | BoolLiteral | Identifier;
		public ParserRule getRule() { return rule; }

		//Binary | Unary | String0 | Int0 | BoolLiteral | Identifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Binary
		public RuleCall getBinaryParserRuleCall_0() { return cBinaryParserRuleCall_0; }

		//Unary
		public RuleCall getUnaryParserRuleCall_1() { return cUnaryParserRuleCall_1; }

		//String0
		public RuleCall getString0ParserRuleCall_2() { return cString0ParserRuleCall_2; }

		//Int0
		public RuleCall getInt0ParserRuleCall_3() { return cInt0ParserRuleCall_3; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_4() { return cBoolLiteralParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	Enum | BooleanValue | Range;
		public ParserRule getRule() { return rule; }

		//Enum | BooleanValue | Range
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_1() { return cBooleanValueParserRuleCall_1; }

		//Range
		public RuleCall getRangeParserRuleCall_2() { return cRangeParserRuleCall_2; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHasKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cHasAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cHasConstraintParserRuleCall_4_2_0 = (RuleCall)cHasAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cHasAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cHasConstraintParserRuleCall_4_3_1_0 = (RuleCall)cHasAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cContainsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cContainsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cContainsAttributeParserRuleCall_5_2_0 = (RuleCall)cContainsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cContainsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cContainsAttributeParserRuleCall_5_3_1_0 = (RuleCall)cContainsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Object:
		//	{Object} "Object" name=EString "{" ("Has" "{" Has+=Constraint ("," Has+=Constraint)* "}")? ("Contains" "{"
		//	Contains+=Attribute ("," Contains+=Attribute)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Object} "Object" name=EString "{" ("Has" "{" Has+=Constraint ("," Has+=Constraint)* "}")? ("Contains" "{"
		//Contains+=Attribute ("," Contains+=Attribute)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }

		//"Object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("Has" "{" Has+=Constraint ("," Has+=Constraint)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"Has"
		public Keyword getHasKeyword_4_0() { return cHasKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//Has+=Constraint
		public Assignment getHasAssignment_4_2() { return cHasAssignment_4_2; }

		//Constraint
		public RuleCall getHasConstraintParserRuleCall_4_2_0() { return cHasConstraintParserRuleCall_4_2_0; }

		//("," Has+=Constraint)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//Has+=Constraint
		public Assignment getHasAssignment_4_3_1() { return cHasAssignment_4_3_1; }

		//Constraint
		public RuleCall getHasConstraintParserRuleCall_4_3_1_0() { return cHasConstraintParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("Contains" "{" Contains+=Attribute ("," Contains+=Attribute)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"Contains"
		public Keyword getContainsKeyword_5_0() { return cContainsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//Contains+=Attribute
		public Assignment getContainsAssignment_5_2() { return cContainsAssignment_5_2; }

		//Attribute
		public RuleCall getContainsAttributeParserRuleCall_5_2_0() { return cContainsAttributeParserRuleCall_5_2_0; }

		//("," Contains+=Attribute)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//Contains+=Attribute
		public Assignment getContainsAssignment_5_3_1() { return cContainsAssignment_5_3_1; }

		//Attribute
		public RuleCall getContainsAttributeParserRuleCall_5_3_1_0() { return cContainsAttributeParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContainsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsExpressionParserRuleCall_3_0 = (RuleCall)cContainsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	"Constraint" "{" "Contains" Contains=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Constraint" "{" "Contains" Contains=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"Contains"
		public Keyword getContainsKeyword_2() { return cContainsKeyword_2; }

		//Contains=Expression
		public Assignment getContainsAssignment_3() { return cContainsAssignment_3; }

		//Expression
		public RuleCall getContainsExpressionParserRuleCall_3_0() { return cContainsExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cContainsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContainsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainsValueParserRuleCall_4_0 = (RuleCall)cContainsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attribute:
		//	"Attribute" name=EString "{" "Contains" Contains=Value "}";
		public ParserRule getRule() { return rule; }

		//"Attribute" name=EString "{" "Contains" Contains=Value "}"
		public Group getGroup() { return cGroup; }

		//"Attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"Contains"
		public Keyword getContainsKeyword_3() { return cContainsKeyword_3; }

		//Contains=Value
		public Assignment getContainsAssignment_4() { return cContainsAssignment_4; }

		//Value
		public RuleCall getContainsValueParserRuleCall_4_0() { return cContainsValueParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOparandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOparandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOparandBinaryOparatorsEnumRuleCall_2_1_0 = (RuleCall)cOparandAssignment_2_1.eContents().get(0);
		private final Keyword cLeftKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftExpressionParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cRightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Binary:
		//	"Binary" "{" ("Oparand" Oparand=BinaryOparators)? "Left" Left=Expression "Right" Right=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Binary" "{" ("Oparand" Oparand=BinaryOparators)? "Left" Left=Expression "Right" Right=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Binary"
		public Keyword getBinaryKeyword_0() { return cBinaryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("Oparand" Oparand=BinaryOparators)?
		public Group getGroup_2() { return cGroup_2; }

		//"Oparand"
		public Keyword getOparandKeyword_2_0() { return cOparandKeyword_2_0; }

		//Oparand=BinaryOparators
		public Assignment getOparandAssignment_2_1() { return cOparandAssignment_2_1; }

		//BinaryOparators
		public RuleCall getOparandBinaryOparatorsEnumRuleCall_2_1_0() { return cOparandBinaryOparatorsEnumRuleCall_2_1_0; }

		//"Left"
		public Keyword getLeftKeyword_3() { return cLeftKeyword_3; }

		//Left=Expression
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_4_0() { return cLeftExpressionParserRuleCall_4_0; }

		//"Right"
		public Keyword getRightKeyword_5() { return cRightKeyword_5; }

		//Right=Expression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_6_0() { return cRightExpressionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOparandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOparandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOparandUnaryOparatorsEnumRuleCall_2_1_0 = (RuleCall)cOparandAssignment_2_1.eContents().get(0);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Unary:
		//	"Unary" "{" ("Oparand" Oparand=UnaryOparators)? "Expression" Expression=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Unary" "{" ("Oparand" Oparand=UnaryOparators)? "Expression" Expression=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Unary"
		public Keyword getUnaryKeyword_0() { return cUnaryKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("Oparand" Oparand=UnaryOparators)?
		public Group getGroup_2() { return cGroup_2; }

		//"Oparand"
		public Keyword getOparandKeyword_2_0() { return cOparandKeyword_2_0; }

		//Oparand=UnaryOparators
		public Assignment getOparandAssignment_2_1() { return cOparandAssignment_2_1; }

		//UnaryOparators
		public RuleCall getOparandUnaryOparatorsEnumRuleCall_2_1_0() { return cOparandUnaryOparatorsEnumRuleCall_2_1_0; }

		//"Expression"
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }

		//Expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAnyURIParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//String0 returns String:
		//	"String" "{" "value" value=AnyURI "}";
		public ParserRule getRule() { return rule; }

		//"String" "{" "value" value=AnyURI "}"
		public Group getGroup() { return cGroup; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=AnyURI
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AnyURI
		public RuleCall getValueAnyURIParserRuleCall_3_0() { return cValueAnyURIParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Int0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Int0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueInt1ParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Int0 returns Int:
		//	"Int" "{" "value" value=Int1 "}";
		public ParserRule getRule() { return rule; }

		//"Int" "{" "value" value=Int1 "}"
		public Group getGroup() { return cGroup; }

		//"Int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=Int1
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Int1
		public RuleCall getValueInt1ParserRuleCall_3_0() { return cValueInt1ParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBooleanParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolLiteral:
		//	"BoolLiteral" "{" "value" value=Boolean "}";
		public ParserRule getRule() { return rule; }

		//"BoolLiteral" "{" "value" value=Boolean "}"
		public Group getGroup() { return cGroup; }

		//"BoolLiteral"
		public Keyword getBoolLiteralKeyword_0() { return cBoolLiteralKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//value=Boolean
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Boolean
		public RuleCall getValueBooleanParserRuleCall_3_0() { return cValueBooleanParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIsAttributeCrossReference_3_0 = (CrossReference)cIsAssignment_3.eContents().get(0);
		private final RuleCall cIsAttributeEStringParserRuleCall_3_0_1 = (RuleCall)cIsAttributeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Identifier:
		//	"Identifier" "{" "Is" Is=[Attribute|EString] "}";
		public ParserRule getRule() { return rule; }

		//"Identifier" "{" "Is" Is=[Attribute|EString] "}"
		public Group getGroup() { return cGroup; }

		//"Identifier"
		public Keyword getIdentifierKeyword_0() { return cIdentifierKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"Is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//Is=[Attribute|EString]
		public Assignment getIsAssignment_3() { return cIsAssignment_3; }

		//[Attribute|EString]
		public CrossReference getIsAttributeCrossReference_3_0() { return cIsAttributeCrossReference_3_0; }

		//EString
		public RuleCall getIsAttributeEStringParserRuleCall_3_0_1() { return cIsAttributeEStringParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
		//	"AnyURI";
		public ParserRule getRule() { return rule; }

		//"AnyURI"
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}

	public class Int1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Int1");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Int1 returns type::Int:
		//	"Int";
		public ParserRule getRule() { return rule; }

		//"Int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
		//	"Boolean";
		public ParserRule getRule() { return rule; }

		//"Boolean"
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValuesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesAnySimpleTypeParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesAnySimpleTypeParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Enum:
		//	"Enum" "{" "values" "{" values+=AnySimpleType ("," values+=AnySimpleType)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Enum" "{" "values" "{" values+=AnySimpleType ("," values+=AnySimpleType)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"values"
		public Keyword getValuesKeyword_2() { return cValuesKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//values+=AnySimpleType
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//AnySimpleType
		public RuleCall getValuesAnySimpleTypeParserRuleCall_4_0() { return cValuesAnySimpleTypeParserRuleCall_4_0; }

		//("," values+=AnySimpleType)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//values+=AnySimpleType
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }

		//AnySimpleType
		public RuleCall getValuesAnySimpleTypeParserRuleCall_5_1_0() { return cValuesAnySimpleTypeParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTrueValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueValueAnyURIParserRuleCall_3_0 = (RuleCall)cTrueValueAssignment_3.eContents().get(0);
		private final Keyword cFalseValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFalseValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFalseValueAnyURIParserRuleCall_5_0 = (RuleCall)cFalseValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BooleanValue:
		//	"BooleanValue" "{" "trueValue" trueValue=AnyURI "falseValue" falseValue=AnyURI "}";
		public ParserRule getRule() { return rule; }

		//"BooleanValue" "{" "trueValue" trueValue=AnyURI "falseValue" falseValue=AnyURI "}"
		public Group getGroup() { return cGroup; }

		//"BooleanValue"
		public Keyword getBooleanValueKeyword_0() { return cBooleanValueKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"trueValue"
		public Keyword getTrueValueKeyword_2() { return cTrueValueKeyword_2; }

		//trueValue=AnyURI
		public Assignment getTrueValueAssignment_3() { return cTrueValueAssignment_3; }

		//AnyURI
		public RuleCall getTrueValueAnyURIParserRuleCall_3_0() { return cTrueValueAnyURIParserRuleCall_3_0; }

		//"falseValue"
		public Keyword getFalseValueKeyword_4() { return cFalseValueKeyword_4; }

		//falseValue=AnyURI
		public Assignment getFalseValueAssignment_5() { return cFalseValueAssignment_5; }

		//AnyURI
		public RuleCall getFalseValueAnyURIParserRuleCall_5_0() { return cFalseValueAnyURIParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRangeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRangeAnySimpleTypeParserRuleCall_3_0 = (RuleCall)cRangeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Range:
		//	"Range" "{" "range" range=AnySimpleType "}";
		public ParserRule getRule() { return rule; }

		//"Range" "{" "range" range=AnySimpleType "}"
		public Group getGroup() { return cGroup; }

		//"Range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"range"
		public Keyword getRangeKeyword_2() { return cRangeKeyword_2; }

		//range=AnySimpleType
		public Assignment getRangeAssignment_3() { return cRangeAssignment_3; }

		//AnySimpleType
		public RuleCall getRangeAnySimpleTypeParserRuleCall_3_0() { return cRangeAnySimpleTypeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AnySimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnySimpleType");
		private final Keyword cAnySimpleTypeKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
		//	"AnySimpleType";
		public ParserRule getRule() { return rule; }

		//"AnySimpleType"
		public Keyword getAnySimpleTypeKeyword() { return cAnySimpleTypeKeyword; }
	}
	
	
	public class BinaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOparators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGtGtKeyword_2_0 = (Keyword)cGtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLtLtKeyword_3_0 = (Keyword)cLtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqEqKeyword_4_0 = (Keyword)cEqEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIsIsKeyword_5_0 = (Keyword)cIsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIfEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIfIfKeyword_6_0 = (Keyword)cIfEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cThenEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cThenThenKeyword_7_0 = (Keyword)cThenEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum BinaryOparators:
		//	and | or | gt | lt | eq | is | if | then;
		public EnumRule getRule() { return rule; }

		//and | or | gt | lt | eq | is | if | then
		public Alternatives getAlternatives() { return cAlternatives; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }

		//gt
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_2() { return cGtEnumLiteralDeclaration_2; }

		//"gt"
		public Keyword getGtGtKeyword_2_0() { return cGtGtKeyword_2_0; }

		//lt
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_3() { return cLtEnumLiteralDeclaration_3; }

		//"lt"
		public Keyword getLtLtKeyword_3_0() { return cLtLtKeyword_3_0; }

		//eq
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_4() { return cEqEnumLiteralDeclaration_4; }

		//"eq"
		public Keyword getEqEqKeyword_4_0() { return cEqEqKeyword_4_0; }

		//is
		public EnumLiteralDeclaration getIsEnumLiteralDeclaration_5() { return cIsEnumLiteralDeclaration_5; }

		//"is"
		public Keyword getIsIsKeyword_5_0() { return cIsIsKeyword_5_0; }

		//if
		public EnumLiteralDeclaration getIfEnumLiteralDeclaration_6() { return cIfEnumLiteralDeclaration_6; }

		//"if"
		public Keyword getIfIfKeyword_6_0() { return cIfIfKeyword_6_0; }

		//then
		public EnumLiteralDeclaration getThenEnumLiteralDeclaration_7() { return cThenEnumLiteralDeclaration_7; }

		//"then"
		public Keyword getThenThenKeyword_7_0() { return cThenThenKeyword_7_0; }
	}

	public class UnaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOparators");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOparators:
		//	not;
		public EnumRule getRule() { return rule; }

		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	
	private ModelElements pModel;
	private ExpressionElements pExpression;
	private ValueElements pValue;
	private ObjectElements pObject;
	private EStringElements pEString;
	private ConstraintElements pConstraint;
	private AttributeElements pAttribute;
	private BinaryElements pBinary;
	private UnaryElements pUnary;
	private String0Elements pString0;
	private Int0Elements pInt0;
	private BoolLiteralElements pBoolLiteral;
	private IdentifierElements pIdentifier;
	private BinaryOparatorsElements unknownRuleBinaryOparators;
	private UnaryOparatorsElements unknownRuleUnaryOparators;
	private AnyURIElements pAnyURI;
	private Int1Elements pInt1;
	private BooleanElements pBoolean;
	private EnumElements pEnum;
	private BooleanValueElements pBooleanValue;
	private RangeElements pRange;
	private AnySimpleTypeElements pAnySimpleType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CpdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("configuratorProject.cpdsl.Cpdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "Model" "{" ("Contains" "{" Contains+=Object ("," Contains+=Object)* "}")? "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Expression:
	//	Binary | Unary | String0 | Int0 | BoolLiteral | Identifier;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Value:
	//	Enum | BooleanValue | Range;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Object:
	//	{Object} "Object" name=EString "{" ("Has" "{" Has+=Constraint ("," Has+=Constraint)* "}")? ("Contains" "{"
	//	Contains+=Attribute ("," Contains+=Attribute)* "}")? "}";
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Constraint:
	//	"Constraint" "{" "Contains" Contains=Expression "}";
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Attribute:
	//	"Attribute" name=EString "{" "Contains" Contains=Value "}";
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Binary:
	//	"Binary" "{" ("Oparand" Oparand=BinaryOparators)? "Left" Left=Expression "Right" Right=Expression "}";
	public BinaryElements getBinaryAccess() {
		return (pBinary != null) ? pBinary : (pBinary = new BinaryElements());
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}

	//Unary:
	//	"Unary" "{" ("Oparand" Oparand=UnaryOparators)? "Expression" Expression=Expression "}";
	public UnaryElements getUnaryAccess() {
		return (pUnary != null) ? pUnary : (pUnary = new UnaryElements());
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}

	//String0 returns String:
	//	"String" "{" "value" value=AnyURI "}";
	public String0Elements getString0Access() {
		return (pString0 != null) ? pString0 : (pString0 = new String0Elements());
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//Int0 returns Int:
	//	"Int" "{" "value" value=Int1 "}";
	public Int0Elements getInt0Access() {
		return (pInt0 != null) ? pInt0 : (pInt0 = new Int0Elements());
	}
	
	public ParserRule getInt0Rule() {
		return getInt0Access().getRule();
	}

	//BoolLiteral:
	//	"BoolLiteral" "{" "value" value=Boolean "}";
	public BoolLiteralElements getBoolLiteralAccess() {
		return (pBoolLiteral != null) ? pBoolLiteral : (pBoolLiteral = new BoolLiteralElements());
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//Identifier:
	//	"Identifier" "{" "Is" Is=[Attribute|EString] "}";
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//enum BinaryOparators:
	//	and | or | gt | lt | eq | is | if | then;
	public BinaryOparatorsElements getBinaryOparatorsAccess() {
		return (unknownRuleBinaryOparators != null) ? unknownRuleBinaryOparators : (unknownRuleBinaryOparators = new BinaryOparatorsElements());
	}
	
	public EnumRule getBinaryOparatorsRule() {
		return getBinaryOparatorsAccess().getRule();
	}

	//enum UnaryOparators:
	//	not;
	public UnaryOparatorsElements getUnaryOparatorsAccess() {
		return (unknownRuleUnaryOparators != null) ? unknownRuleUnaryOparators : (unknownRuleUnaryOparators = new UnaryOparatorsElements());
	}
	
	public EnumRule getUnaryOparatorsRule() {
		return getUnaryOparatorsAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnyURI returns type::AnyURI:
	//	"AnyURI";
	public AnyURIElements getAnyURIAccess() {
		return (pAnyURI != null) ? pAnyURI : (pAnyURI = new AnyURIElements());
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Int1 returns type::Int:
	//	"Int";
	public Int1Elements getInt1Access() {
		return (pInt1 != null) ? pInt1 : (pInt1 = new Int1Elements());
	}
	
	public ParserRule getInt1Rule() {
		return getInt1Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns type::Boolean:
	//	"Boolean";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Enum:
	//	"Enum" "{" "values" "{" values+=AnySimpleType ("," values+=AnySimpleType)* "}" "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//BooleanValue:
	//	"BooleanValue" "{" "trueValue" trueValue=AnyURI "falseValue" falseValue=AnyURI "}";
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Range:
	//	"Range" "{" "range" range=AnySimpleType "}";
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / AnySimpleType returns type::AnySimpleType:
	//	"AnySimpleType";
	public AnySimpleTypeElements getAnySimpleTypeAccess() {
		return (pAnySimpleType != null) ? pAnySimpleType : (pAnySimpleType = new AnySimpleTypeElements());
	}
	
	public ParserRule getAnySimpleTypeRule() {
		return getAnySimpleTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
