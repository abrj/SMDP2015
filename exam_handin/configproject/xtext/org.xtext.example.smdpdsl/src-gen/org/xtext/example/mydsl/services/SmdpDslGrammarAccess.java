/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SmdpDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMyModelContainsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMyModelContainsMyObjectParserRuleCall_1_1_0 = (RuleCall)cMyModelContainsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cMyModelContainsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cMyModelContainsMyObjectParserRuleCall_1_2_1_0 = (RuleCall)cMyModelContainsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//myModel:
		//	name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?;
		public ParserRule getRule() { return rule; }

		//name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//myModelContains+=myObject
		public Assignment getMyModelContainsAssignment_1_1() { return cMyModelContainsAssignment_1_1; }

		//myObject
		public RuleCall getMyModelContainsMyObjectParserRuleCall_1_1_0() { return cMyModelContainsMyObjectParserRuleCall_1_1_0; }

		//("," myModelContains+=myObject)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//myModelContains+=myObject
		public Assignment getMyModelContainsAssignment_1_2_1() { return cMyModelContainsAssignment_1_2_1; }

		//myObject
		public RuleCall getMyModelContainsMyObjectParserRuleCall_1_2_1_0() { return cMyModelContainsMyObjectParserRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class MyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyNumberEnumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMyStringEnumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// myStringEnum | 
		//myValue:
		//	myBoolean | myRange | myNumberEnum | myStringEnum;
		public ParserRule getRule() { return rule; }

		//myBoolean | myRange | myNumberEnum | myStringEnum
		public Alternatives getAlternatives() { return cAlternatives; }

		//myBoolean
		public RuleCall getMyBooleanParserRuleCall_0() { return cMyBooleanParserRuleCall_0; }

		//myRange
		public RuleCall getMyRangeParserRuleCall_1() { return cMyRangeParserRuleCall_1; }

		//myNumberEnum
		public RuleCall getMyNumberEnumParserRuleCall_2() { return cMyNumberEnumParserRuleCall_2; }

		//myStringEnum
		public RuleCall getMyStringEnumParserRuleCall_3() { return cMyStringEnumParserRuleCall_3; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class MyObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMyAttributeContainsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMyAttributeContainsMyAttributeParserRuleCall_2_1_0 = (RuleCall)cMyAttributeContainsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMyAttributeContainsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMyAttributeContainsMyAttributeParserRuleCall_2_2_1_0 = (RuleCall)cMyAttributeContainsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstrainedByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMyObjectHasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMyObjectHasMyConstraintParserRuleCall_3_1_0 = (RuleCall)cMyObjectHasAssignment_3_1.eContents().get(0);
		private final Assignment cMyObjectHasAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMyObjectHasMyConstraintParserRuleCall_3_2_0 = (RuleCall)cMyObjectHasAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//myObject:
		//	name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)? ("Constrained by"
		//	myObjectHas+=myConstraint myObjectHas+=myConstraint*)? "}";
		public ParserRule getRule() { return rule; }

		//name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)? ("Constrained by"
		//myObjectHas+=myConstraint myObjectHas+=myConstraint*)? "}"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"has"
		public Keyword getHasKeyword_2_0() { return cHasKeyword_2_0; }

		//myAttributeContains+=myAttribute
		public Assignment getMyAttributeContainsAssignment_2_1() { return cMyAttributeContainsAssignment_2_1; }

		//myAttribute
		public RuleCall getMyAttributeContainsMyAttributeParserRuleCall_2_1_0() { return cMyAttributeContainsMyAttributeParserRuleCall_2_1_0; }

		//("," myAttributeContains+=myAttribute)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//myAttributeContains+=myAttribute
		public Assignment getMyAttributeContainsAssignment_2_2_1() { return cMyAttributeContainsAssignment_2_2_1; }

		//myAttribute
		public RuleCall getMyAttributeContainsMyAttributeParserRuleCall_2_2_1_0() { return cMyAttributeContainsMyAttributeParserRuleCall_2_2_1_0; }

		//("Constrained by" myObjectHas+=myConstraint myObjectHas+=myConstraint*)?
		public Group getGroup_3() { return cGroup_3; }

		//"Constrained by"
		public Keyword getConstrainedByKeyword_3_0() { return cConstrainedByKeyword_3_0; }

		//myObjectHas+=myConstraint
		public Assignment getMyObjectHasAssignment_3_1() { return cMyObjectHasAssignment_3_1; }

		//myConstraint
		public RuleCall getMyObjectHasMyConstraintParserRuleCall_3_1_0() { return cMyObjectHasMyConstraintParserRuleCall_3_1_0; }

		//myObjectHas+=myConstraint*
		public Assignment getMyObjectHasAssignment_3_2() { return cMyObjectHasAssignment_3_2; }

		//myConstraint
		public RuleCall getMyObjectHasMyConstraintParserRuleCall_3_2_0() { return cMyObjectHasMyConstraintParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMyIfConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMyIfConstraintMyBinaryParserRuleCall_1_0 = (RuleCall)cMyIfConstraintAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMyThenConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMyThenConstraintMyBinaryParserRuleCall_3_0 = (RuleCall)cMyThenConstraintAssignment_3.eContents().get(0);
		
		//myConstraint:
		//	"if" myIfConstraint=myBinary "then" myThenConstraint=myBinary;
		public ParserRule getRule() { return rule; }

		//"if" myIfConstraint=myBinary "then" myThenConstraint=myBinary
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//myIfConstraint=myBinary
		public Assignment getMyIfConstraintAssignment_1() { return cMyIfConstraintAssignment_1; }

		//myBinary
		public RuleCall getMyIfConstraintMyBinaryParserRuleCall_1_0() { return cMyIfConstraintMyBinaryParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//myThenConstraint=myBinary
		public Assignment getMyThenConstraintAssignment_3() { return cMyThenConstraintAssignment_3; }

		//myBinary
		public RuleCall getMyThenConstraintMyBinaryParserRuleCall_3_0() { return cMyThenConstraintMyBinaryParserRuleCall_3_0; }
	}

	public class MyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMyAttributeContainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMyAttributeContainsMyValueParserRuleCall_2_0 = (RuleCall)cMyAttributeContainsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//myAttribute:
		//	name=EString "[" myAttributeContains=myValue "]";
		public ParserRule getRule() { return rule; }

		//name=EString "[" myAttributeContains=myValue "]"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//myAttributeContains=myValue
		public Assignment getMyAttributeContainsAssignment_2() { return cMyAttributeContainsAssignment_2; }

		//myValue
		public RuleCall getMyAttributeContainsMyValueParserRuleCall_2_0() { return cMyAttributeContainsMyValueParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MyBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMyUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMyBinaryMyBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOparandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOparandMyBinaryOparatorsEnumRuleCall_1_1_0 = (RuleCall)cOparandAssignment_1_1.eContents().get(0);
		private final Assignment cMyBinaryRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMyBinaryRightMyUnaryParserRuleCall_1_2_0 = (RuleCall)cMyBinaryRightAssignment_1_2.eContents().get(0);
		
		//myBinary returns myExpression:
		//	myUnary ({myBinary.myBinaryLeft=current} Oparand=myBinaryOparators myBinaryRight=myUnary)*;
		public ParserRule getRule() { return rule; }

		//myUnary ({myBinary.myBinaryLeft=current} Oparand=myBinaryOparators myBinaryRight=myUnary)*
		public Group getGroup() { return cGroup; }

		//myUnary
		public RuleCall getMyUnaryParserRuleCall_0() { return cMyUnaryParserRuleCall_0; }

		//({myBinary.myBinaryLeft=current} Oparand=myBinaryOparators myBinaryRight=myUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//{myBinary.myBinaryLeft=current}
		public Action getMyBinaryMyBinaryLeftAction_1_0() { return cMyBinaryMyBinaryLeftAction_1_0; }

		//Oparand=myBinaryOparators
		public Assignment getOparandAssignment_1_1() { return cOparandAssignment_1_1; }

		//myBinaryOparators
		public RuleCall getOparandMyBinaryOparatorsEnumRuleCall_1_1_0() { return cOparandMyBinaryOparatorsEnumRuleCall_1_1_0; }

		//myBinaryRight=myUnary
		public Assignment getMyBinaryRightAssignment_1_2() { return cMyBinaryRightAssignment_1_2; }

		//myUnary
		public RuleCall getMyBinaryRightMyUnaryParserRuleCall_1_2_0() { return cMyBinaryRightMyUnaryParserRuleCall_1_2_0; }
	}

	public class MyPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyNumberEnumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMyIdentifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cMyBinaryParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cMyStringEnumParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// ( and ) is with  for fixing left recur...
		//myPrimary returns myExpression:
		//	myBoolean | myRange | myNumberEnum | myIdentifier | "(" myBinary ")" | myStringEnum;
		public ParserRule getRule() { return rule; }

		//myBoolean | myRange | myNumberEnum | myIdentifier | "(" myBinary ")" | myStringEnum
		public Alternatives getAlternatives() { return cAlternatives; }

		//myBoolean
		public RuleCall getMyBooleanParserRuleCall_0() { return cMyBooleanParserRuleCall_0; }

		//myRange
		public RuleCall getMyRangeParserRuleCall_1() { return cMyRangeParserRuleCall_1; }

		//myNumberEnum
		public RuleCall getMyNumberEnumParserRuleCall_2() { return cMyNumberEnumParserRuleCall_2; }

		//myIdentifier
		public RuleCall getMyIdentifierParserRuleCall_3() { return cMyIdentifierParserRuleCall_3; }

		//"(" myBinary ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//myBinary
		public RuleCall getMyBinaryParserRuleCall_4_1() { return cMyBinaryParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//myStringEnum
		public RuleCall getMyStringEnumParserRuleCall_5() { return cMyStringEnumParserRuleCall_5; }
	}

	public class MyUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMyUnaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOparandAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOparandMyUnaryOparatorsEnumRuleCall_0_1_0_0 = (RuleCall)cOparandAssignment_0_1_0.eContents().get(0);
		private final Assignment cMyUnaryExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cMyUnaryExpressionMyPrimaryParserRuleCall_0_1_1_0 = (RuleCall)cMyUnaryExpressionAssignment_0_1_1.eContents().get(0);
		private final RuleCall cMyPrimaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//myUnary returns myExpression:
		//	{myUnary} (Oparand=myUnaryOparators myUnaryExpression=myPrimary) | myPrimary;
		public ParserRule getRule() { return rule; }

		//{myUnary} (Oparand=myUnaryOparators myUnaryExpression=myPrimary) | myPrimary
		public Alternatives getAlternatives() { return cAlternatives; }

		//{myUnary} (Oparand=myUnaryOparators myUnaryExpression=myPrimary)
		public Group getGroup_0() { return cGroup_0; }

		//{myUnary}
		public Action getMyUnaryAction_0_0() { return cMyUnaryAction_0_0; }

		//Oparand=myUnaryOparators myUnaryExpression=myPrimary
		public Group getGroup_0_1() { return cGroup_0_1; }

		//Oparand=myUnaryOparators
		public Assignment getOparandAssignment_0_1_0() { return cOparandAssignment_0_1_0; }

		//myUnaryOparators
		public RuleCall getOparandMyUnaryOparatorsEnumRuleCall_0_1_0_0() { return cOparandMyUnaryOparatorsEnumRuleCall_0_1_0_0; }

		//myUnaryExpression=myPrimary
		public Assignment getMyUnaryExpressionAssignment_0_1_1() { return cMyUnaryExpressionAssignment_0_1_1; }

		//myPrimary
		public RuleCall getMyUnaryExpressionMyPrimaryParserRuleCall_0_1_1_0() { return cMyUnaryExpressionMyPrimaryParserRuleCall_0_1_1_0; }

		//myPrimary
		public RuleCall getMyPrimaryParserRuleCall_1() { return cMyPrimaryParserRuleCall_1; }
	}

	public class MyBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrueValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrueValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cTrueValueAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFalseValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFalseValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cFalseValueAssignment_2.eContents().get(0);
		
		//myBoolean:
		//	trueValue=STRING ":" falseValue=STRING;
		public ParserRule getRule() { return rule; }

		//trueValue=STRING ":" falseValue=STRING
		public Group getGroup() { return cGroup; }

		//trueValue=STRING
		public Assignment getTrueValueAssignment_0() { return cTrueValueAssignment_0; }

		//STRING
		public RuleCall getTrueValueSTRINGTerminalRuleCall_0_0() { return cTrueValueSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//falseValue=STRING
		public Assignment getFalseValueAssignment_2() { return cFalseValueAssignment_2; }

		//STRING
		public RuleCall getFalseValueSTRINGTerminalRuleCall_2_0() { return cFalseValueSTRINGTerminalRuleCall_2_0; }
	}

	public class MyIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myIdentifier");
		private final Assignment cMyIntentifierIsAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMyIntentifierIsMyAttributeCrossReference_0 = (CrossReference)cMyIntentifierIsAssignment.eContents().get(0);
		private final RuleCall cMyIntentifierIsMyAttributeIDTerminalRuleCall_0_1 = (RuleCall)cMyIntentifierIsMyAttributeCrossReference_0.eContents().get(1);
		
		//myIdentifier:
		//	myIntentifierIs=[myAttribute];
		public ParserRule getRule() { return rule; }

		//myIntentifierIs=[myAttribute]
		public Assignment getMyIntentifierIsAssignment() { return cMyIntentifierIsAssignment; }

		//[myAttribute]
		public CrossReference getMyIntentifierIsMyAttributeCrossReference_0() { return cMyIntentifierIsMyAttributeCrossReference_0; }

		//ID
		public RuleCall getMyIntentifierIsMyAttributeIDTerminalRuleCall_0_1() { return cMyIntentifierIsMyAttributeIDTerminalRuleCall_0_1; }
	}

	public class MyRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromINTTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToINTTerminalRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//myRange:
		//	from=INT "-" to=INT;
		public ParserRule getRule() { return rule; }

		//from=INT "-" to=INT
		public Group getGroup() { return cGroup; }

		//from=INT
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//INT
		public RuleCall getFromINTTerminalRuleCall_0_0() { return cFromINTTerminalRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//to=INT
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//INT
		public RuleCall getToINTTerminalRuleCall_2_0() { return cToINTTerminalRuleCall_2_0; }
	}

	public class MyStringEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myStringEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//myStringEnum:
		//	values+=STRING ("," values+=STRING)*;
		public ParserRule getRule() { return rule; }

		//values+=STRING ("," values+=STRING)*
		public Group getGroup() { return cGroup; }

		//values+=STRING
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_0_0() { return cValuesSTRINGTerminalRuleCall_0_0; }

		//("," values+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=STRING
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_1_0() { return cValuesSTRINGTerminalRuleCall_1_1_0; }
	}

	public class MyNumberEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "myNumberEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesEDoubleParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEDoubleParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//myNumberEnum:
		//	values+=EDouble ("," values+=EDouble)*;
		public ParserRule getRule() { return rule; }

		//values+=EDouble ("," values+=EDouble)*
		public Group getGroup() { return cGroup; }

		//values+=EDouble
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//EDouble
		public RuleCall getValuesEDoubleParserRuleCall_0_0() { return cValuesEDoubleParserRuleCall_0_0; }

		//("," values+=EDouble)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=EDouble
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//EDouble
		public RuleCall getValuesEDoubleParserRuleCall_1_1_0() { return cValuesEDoubleParserRuleCall_1_1_0; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Alternatives cAlternatives_0_4_0 = (Alternatives)cGroup_0_4.eContents().get(0);
		private final Keyword cEKeyword_0_4_0_0 = (Keyword)cAlternatives_0_4_0.eContents().get(0);
		private final Keyword cEKeyword_0_4_0_1 = (Keyword)cAlternatives_0_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_4_2 = (RuleCall)cGroup_0_4.eContents().get(2);
		private final RuleCall cEIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)? | EInt;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)? | EInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup_0() { return cGroup_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_3() { return cINTTerminalRuleCall_0_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"E" | "e"
		public Alternatives getAlternatives_0_4_0() { return cAlternatives_0_4_0; }

		//"E"
		public Keyword getEKeyword_0_4_0_0() { return cEKeyword_0_4_0_0; }

		//"e"
		public Keyword getEKeyword_0_4_0_1() { return cEKeyword_0_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0_4_1() { return cHyphenMinusKeyword_0_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_4_2() { return cINTTerminalRuleCall_0_4_2; }

		//EInt
		public RuleCall getEIntParserRuleCall_1() { return cEIntParserRuleCall_1; }
	}
	
	
	public class MyBinaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "myBinaryOparators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGtLessThanSignKeyword_2_0 = (Keyword)cGtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLtGreaterThanSignKeyword_3_0 = (Keyword)cLtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqEqualsSignKeyword_4_0 = (Keyword)cEqEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIsCanKeyword_5_0 = (Keyword)cIsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum myBinaryOparators:
		//	and="&&" | or="|" | gt="<" | lt=">" | eq="=" | is= //| if = 'if' | then = 'then'
		//	"can";
		public EnumRule getRule() { return rule; }

		//and="&&" | or="|" | gt="<" | lt=">" | eq="=" | is= //| if = 'if' | then = 'then'
		//"can"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and="&&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getAndAmpersandAmpersandKeyword_0_0() { return cAndAmpersandAmpersandKeyword_0_0; }

		//or="|"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"|"
		public Keyword getOrVerticalLineKeyword_1_0() { return cOrVerticalLineKeyword_1_0; }

		//gt="<"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_2() { return cGtEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getGtLessThanSignKeyword_2_0() { return cGtLessThanSignKeyword_2_0; }

		//lt=">"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_3() { return cLtEnumLiteralDeclaration_3; }

		//">"
		public Keyword getLtGreaterThanSignKeyword_3_0() { return cLtGreaterThanSignKeyword_3_0; }

		//eq="="
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_4() { return cEqEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqEqualsSignKeyword_4_0() { return cEqEqualsSignKeyword_4_0; }

		//is= //| if = 'if' | then = 'then'
		//"can"
		public EnumLiteralDeclaration getIsEnumLiteralDeclaration_5() { return cIsEnumLiteralDeclaration_5; }

		////| if = 'if' | then = 'then'
		//"can"
		public Keyword getIsCanKeyword_5_0() { return cIsCanKeyword_5_0; }
	}

	public class MyUnaryOparatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "myUnaryOparators");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum myUnaryOparators:
		//	not;
		public EnumRule getRule() { return rule; }

		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	
	private MyModelElements pMyModel;
	private MyValueElements pMyValue;
	private EStringElements pEString;
	private MyObjectElements pMyObject;
	private MyConstraintElements pMyConstraint;
	private MyAttributeElements pMyAttribute;
	private MyBinaryElements pMyBinary;
	private MyPrimaryElements pMyPrimary;
	private MyUnaryElements pMyUnary;
	private MyBooleanElements pMyBoolean;
	private MyIdentifierElements pMyIdentifier;
	private MyRangeElements pMyRange;
	private MyStringEnumElements pMyStringEnum;
	private MyNumberEnumElements pMyNumberEnum;
	private MyBinaryOparatorsElements unknownRuleMyBinaryOparators;
	private MyUnaryOparatorsElements unknownRuleMyUnaryOparators;
	private EBooleanElements pEBoolean;
	private EIntElements pEInt;
	private EDoubleElements pEDouble;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmdpDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.SmdpDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//myModel:
	//	name=EString ("{" myModelContains+=myObject ("," myModelContains+=myObject)* "}")?;
	public MyModelElements getMyModelAccess() {
		return (pMyModel != null) ? pMyModel : (pMyModel = new MyModelElements());
	}
	
	public ParserRule getMyModelRule() {
		return getMyModelAccess().getRule();
	}

	//// myStringEnum | 
	//myValue:
	//	myBoolean | myRange | myNumberEnum | myStringEnum;
	public MyValueElements getMyValueAccess() {
		return (pMyValue != null) ? pMyValue : (pMyValue = new MyValueElements());
	}
	
	public ParserRule getMyValueRule() {
		return getMyValueAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//myObject:
	//	name=EString "{" ("has" myAttributeContains+=myAttribute ("," myAttributeContains+=myAttribute)*)? ("Constrained by"
	//	myObjectHas+=myConstraint myObjectHas+=myConstraint*)? "}";
	public MyObjectElements getMyObjectAccess() {
		return (pMyObject != null) ? pMyObject : (pMyObject = new MyObjectElements());
	}
	
	public ParserRule getMyObjectRule() {
		return getMyObjectAccess().getRule();
	}

	//myConstraint:
	//	"if" myIfConstraint=myBinary "then" myThenConstraint=myBinary;
	public MyConstraintElements getMyConstraintAccess() {
		return (pMyConstraint != null) ? pMyConstraint : (pMyConstraint = new MyConstraintElements());
	}
	
	public ParserRule getMyConstraintRule() {
		return getMyConstraintAccess().getRule();
	}

	//myAttribute:
	//	name=EString "[" myAttributeContains=myValue "]";
	public MyAttributeElements getMyAttributeAccess() {
		return (pMyAttribute != null) ? pMyAttribute : (pMyAttribute = new MyAttributeElements());
	}
	
	public ParserRule getMyAttributeRule() {
		return getMyAttributeAccess().getRule();
	}

	//myBinary returns myExpression:
	//	myUnary ({myBinary.myBinaryLeft=current} Oparand=myBinaryOparators myBinaryRight=myUnary)*;
	public MyBinaryElements getMyBinaryAccess() {
		return (pMyBinary != null) ? pMyBinary : (pMyBinary = new MyBinaryElements());
	}
	
	public ParserRule getMyBinaryRule() {
		return getMyBinaryAccess().getRule();
	}

	//// ( and ) is with  for fixing left recur...
	//myPrimary returns myExpression:
	//	myBoolean | myRange | myNumberEnum | myIdentifier | "(" myBinary ")" | myStringEnum;
	public MyPrimaryElements getMyPrimaryAccess() {
		return (pMyPrimary != null) ? pMyPrimary : (pMyPrimary = new MyPrimaryElements());
	}
	
	public ParserRule getMyPrimaryRule() {
		return getMyPrimaryAccess().getRule();
	}

	//myUnary returns myExpression:
	//	{myUnary} (Oparand=myUnaryOparators myUnaryExpression=myPrimary) | myPrimary;
	public MyUnaryElements getMyUnaryAccess() {
		return (pMyUnary != null) ? pMyUnary : (pMyUnary = new MyUnaryElements());
	}
	
	public ParserRule getMyUnaryRule() {
		return getMyUnaryAccess().getRule();
	}

	//myBoolean:
	//	trueValue=STRING ":" falseValue=STRING;
	public MyBooleanElements getMyBooleanAccess() {
		return (pMyBoolean != null) ? pMyBoolean : (pMyBoolean = new MyBooleanElements());
	}
	
	public ParserRule getMyBooleanRule() {
		return getMyBooleanAccess().getRule();
	}

	//myIdentifier:
	//	myIntentifierIs=[myAttribute];
	public MyIdentifierElements getMyIdentifierAccess() {
		return (pMyIdentifier != null) ? pMyIdentifier : (pMyIdentifier = new MyIdentifierElements());
	}
	
	public ParserRule getMyIdentifierRule() {
		return getMyIdentifierAccess().getRule();
	}

	//myRange:
	//	from=INT "-" to=INT;
	public MyRangeElements getMyRangeAccess() {
		return (pMyRange != null) ? pMyRange : (pMyRange = new MyRangeElements());
	}
	
	public ParserRule getMyRangeRule() {
		return getMyRangeAccess().getRule();
	}

	//myStringEnum:
	//	values+=STRING ("," values+=STRING)*;
	public MyStringEnumElements getMyStringEnumAccess() {
		return (pMyStringEnum != null) ? pMyStringEnum : (pMyStringEnum = new MyStringEnumElements());
	}
	
	public ParserRule getMyStringEnumRule() {
		return getMyStringEnumAccess().getRule();
	}

	//myNumberEnum:
	//	values+=EDouble ("," values+=EDouble)*;
	public MyNumberEnumElements getMyNumberEnumAccess() {
		return (pMyNumberEnum != null) ? pMyNumberEnum : (pMyNumberEnum = new MyNumberEnumElements());
	}
	
	public ParserRule getMyNumberEnumRule() {
		return getMyNumberEnumAccess().getRule();
	}

	//enum myBinaryOparators:
	//	and="&&" | or="|" | gt="<" | lt=">" | eq="=" | is= //| if = 'if' | then = 'then'
	//	"can";
	public MyBinaryOparatorsElements getMyBinaryOparatorsAccess() {
		return (unknownRuleMyBinaryOparators != null) ? unknownRuleMyBinaryOparators : (unknownRuleMyBinaryOparators = new MyBinaryOparatorsElements());
	}
	
	public EnumRule getMyBinaryOparatorsRule() {
		return getMyBinaryOparatorsAccess().getRule();
	}

	//enum myUnaryOparators:
	//	not;
	public MyUnaryOparatorsElements getMyUnaryOparatorsAccess() {
		return (unknownRuleMyUnaryOparators != null) ? unknownRuleMyUnaryOparators : (unknownRuleMyUnaryOparators = new MyUnaryOparatorsElements());
	}
	
	public EnumRule getMyUnaryOparatorsRule() {
		return getMyUnaryOparatorsAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)? | EInt;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
